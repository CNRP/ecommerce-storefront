This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: app/Models/**, app/Http/Controllers/**, app/Services/**, resources/views/frontend/**, database/seeders/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  Http/
    Controllers/
      Api/
        CheckoutController.php
      Frontend/
        CartController.php
        CategoryController.php
        CheckoutController.php
        HomeController.php
        OrderController.php
        ProductController.php
      Webhooks/
        StripeController.php
      Controller.php
  Models/
    Customer/
      Customer.php
      CustomerAddress.php
    Order/
      InventoryTransaction.php
      Order.php
      OrderItem.php
      OrderStatusHistory.php
    Payment/
      Payment.php
    Product/
      Attribute.php
      AttributeValue.php
      Category.php
      Product.php
      ProductVariant.php
    User/
      Vendor.php
    User.php
  Services/
    CartService.php
    CheckoutService.php
    InventoryService.php
    OrderService.php
    PaymentService.php
database/
  seeders/
    CategorySeeder.php
    DatabaseSeeder.php
    DefaultVendorSeeder.php
    ProductSeeder.php
resources/
  views/
    frontend/
      cart/
        index.blade.php
        sidebar.blade.php
      checkout/
        confirmation.blade.php
        index.blade.php
      orders/
        index.blade.php
        show.blade.php
        track.blade.php
      products/
        card.blade.php
        index.blade.php
        show.blade.php
      home.blade.php
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/Http/Controllers/Api/CheckoutController.php">
<?php

// app/Http/Controllers/Api/CheckoutController.php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Order\Order;
use App\Services\CheckoutService;
use App\Services\PaymentService;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class CheckoutController extends Controller
{
    public function __construct(
        protected CheckoutService $checkoutService,
        protected PaymentService $paymentService
    ) {}

    /**
     * Initialize checkout process (AJAX)
     */
    public function initialize(Request $request): JsonResponse
    {
        try {
            // Log the incoming request
            \Log::info('Checkout initialize request', [
                'data' => $request->all(),
                'headers' => $request->headers->all(),
            ]);

            $validated = $request->validate([
                'customer.first_name' => 'required|string|max:255',
                'customer.last_name' => 'required|string|max:255',
                'customer.email' => 'required|email|max:255',
                'customer.phone' => 'nullable|string|max:20',
                'billing_address.first_name' => 'required|string|max:255',
                'billing_address.last_name' => 'required|string|max:255',
                'billing_address.company' => 'nullable|string|max:255',
                'billing_address.address_line_1' => 'required|string|max:255',
                'billing_address.address_line_2' => 'nullable|string|max:255',
                'billing_address.city' => 'required|string|max:255',
                'billing_address.state_county' => 'required|string|max:255',
                'billing_address.postal_code' => 'required|string|max:20',
                'billing_address.country' => 'required|string|size:2',
                'shipping_address.first_name' => 'required|string|max:255',
                'shipping_address.last_name' => 'required|string|max:255',
                'shipping_address.company' => 'nullable|string|max:255',
                'shipping_address.address_line_1' => 'required|string|max:255',
                'shipping_address.address_line_2' => 'nullable|string|max:255',
                'shipping_address.city' => 'required|string|max:255',
                'shipping_address.state_county' => 'required|string|max:255',
                'shipping_address.postal_code' => 'required|string|max:20',
                'shipping_address.country' => 'required|string|size:2',
                'customer_notes' => 'nullable|string|max:1000',
            ]);

            \Log::info('Validation passed', ['validated' => $validated]);

            // Test if services are available
            if (! $this->checkoutService) {
                \Log::error('CheckoutService not available');

                return response()->json([
                    'success' => false,
                    'message' => 'Checkout service not available',
                ], 500);
            }

            if (! $this->paymentService) {
                \Log::error('PaymentService not available');

                return response()->json([
                    'success' => false,
                    'message' => 'Payment service not available',
                ], 500);
            }

            // Try the actual initialization
            $result = $this->checkoutService->initializeCheckout($validated);

            \Log::info('Checkout initialized successfully', ['order_id' => $result['order']->id]);

            return response()->json([
                'success' => true,
                'order_id' => $result['order']->id,
                'client_secret' => $result['client_secret'],
                'customer' => [
                    'id' => $result['customer']->id,
                    'email' => $result['customer']->email,
                    'name' => $result['customer']->full_name,
                ],
            ]);

        } catch (\Illuminate\Validation\ValidationException $e) {
            \Log::error('Validation failed', ['errors' => $e->errors()]);

            return response()->json([
                'success' => false,
                'message' => 'Validation failed',
                'errors' => $e->errors(),
            ], 422);

        } catch (\Exception $e) {
            \Log::error('Checkout initialization failed', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);

            return response()->json([
                'success' => false,
                'message' => 'Checkout initialization failed: '.$e->getMessage(),
            ], 500);
        }
    }

    /**
     * Complete checkout after payment confirmation (AJAX)
     */
    public function complete(Request $request): JsonResponse
    {
        $validated = $request->validate([
            'order_id' => 'required|exists:orders,id',
            'payment_intent_id' => 'required|string',
        ]);

        try {
            $order = Order::findOrFail($validated['order_id']);

            // Verify payment intent status
            $paymentIntent = $this->paymentService->retrievePaymentIntent($validated['payment_intent_id']);

            if ($paymentIntent['status'] !== 'succeeded') {
                return response()->json([
                    'success' => false,
                    'message' => 'Payment not confirmed',
                ], 400);
            }

            $result = $this->checkoutService->completeCheckout($order);

            return response()->json([
                'success' => true,
                'order' => [
                    'id' => $result['order']->id,
                    'order_number' => $result['order']->order_number,
                    'total' => $result['order']->getTotalMoney()->format(),
                    'status' => $result['order']->status,
                ],
                'redirect_url' => route('checkout.confirmation', [
                    'orderNumber' => $result['order']->order_number,
                    'token' => $result['order']->guest_token,
                ]),
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage(),
            ], 400);
        }
    }

    /**
     * Handle checkout errors (AJAX)
     */
    public function error(Request $request): JsonResponse
    {
        $validated = $request->validate([
            'order_id' => 'required|exists:orders,id',
            'error_message' => 'required|string',
        ]);

        try {
            $order = Order::findOrFail($validated['order_id']);
            $this->checkoutService->handleCheckoutFailure($order, $validated['error_message']);

            return response()->json([
                'success' => true,
                'message' => 'Error recorded',
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage(),
            ], 400);
        }
    }

    /**
     * Get checkout summary (AJAX)
     */
    public function summary(): JsonResponse
    {
        try {
            $summary = $this->checkoutService->getCheckoutSummary();

            return response()->json($summary);
        } catch (\Exception $e) {
            return response()->json([
                'error' => $e->getMessage(),
            ], 400);
        }
    }
}
</file>

<file path="app/Http/Controllers/Frontend/CartController.php">
<?php

// app/Http/Controllers/Frontend/CartController.php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Product\Product;
use App\Models\Product\ProductVariant;
use App\Services\CartService;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class CartController extends Controller
{
    public function __construct(
        protected CartService $cartService
    ) {}

    public function index(): View
    {
        $cart = $this->cartService->getCart();
        $total = $this->cartService->getTotal();

        return view('frontend.cart.index', compact('cart', 'total'));
    }

    public function add(Request $request): JsonResponse
    {
        $request->validate([
            'product_id' => 'required|exists:products,id',
            'variant_id' => 'nullable|exists:product_variants,id',
            'quantity' => 'required|integer|min:1',
        ]);

        if ($request->variant_id) {
            $variant = ProductVariant::findOrFail($request->variant_id);
            $this->cartService->addItem($variant, $request->quantity);
            $item = $variant;
        } else {
            $product = Product::findOrFail($request->product_id);
            $this->cartService->addItem($product, $request->quantity);
            $item = $product;
        }

        return response()->json([
            'success' => true,
            'message' => 'Item added to cart',
            'cart_count' => $this->cartService->getItemCount(),
            'cart_total' => $this->cartService->getTotal()->value,
        ]);
    }

    public function update(Request $request, string $key): JsonResponse
    {
        $request->validate([
            'quantity' => 'required|integer|min:1',
        ]);

        $this->cartService->updateQuantity($key, $request->quantity);

        return response()->json([
            'success' => true,
            'cart_total' => $this->cartService->getTotal()->value,
        ]);
    }

    public function remove(string $key): JsonResponse
    {
        $this->cartService->removeItem($key);

        return response()->json([
            'success' => true,
            'cart_count' => $this->cartService->getItemCount(),
            'cart_total' => $this->cartService->getTotal()->value,
        ]);
    }
}
</file>

<file path="app/Http/Controllers/Frontend/CategoryController.php">
<?php

// app/Http/Controllers/Frontend/CategoryController.php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Product\Category;
use Illuminate\Http\Request;
use Illuminate\View\View;

class CategoryController extends Controller
{
    public function show(Category $category, Request $request): View
    {
        $query = $category->products()
            ->with(['categories', 'variants'])
            ->published()
            ->inStock();

        // Search within category
        if ($request->filled('search')) {
            $query->search($request->search);
        }

        // Price filter
        if ($request->filled('min_price')) {
            $query->where('price', '>=', $request->min_price);
        }

        if ($request->filled('max_price')) {
            $query->where('price', '<=', $request->max_price);
        }

        // Sorting
        $sort = $request->get('sort', 'created_at');
        switch ($sort) {
            case 'price_low':
                $query->orderBy('price', 'asc');
                break;
            case 'price_high':
                $query->orderBy('price', 'desc');
                break;
            case 'name':
                $query->orderBy('name', 'asc');
                break;
            default:
                $query->orderBy('created_at', 'desc');
        }

        $products = $query->paginate(12);
        $subcategories = $category->children()->active()->get();

        return view('frontend.categories.show', compact('category', 'products', 'subcategories'));
    }
}
</file>

<file path="app/Http/Controllers/Frontend/CheckoutController.php">
<?php

// app/Http/Controllers/Frontend/CheckoutController.php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Order\Order;
use App\Services\CheckoutService;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class CheckoutController extends Controller
{
    public function __construct(
        protected CheckoutService $checkoutService
    ) {}

    /**
     * Show checkout page
     */
    public function index(): View|RedirectResponse
    {
        $summary = $this->checkoutService->getCheckoutSummary();

        if ($summary['item_count'] === 0) {
            return redirect()->route('cart.index')->with('error', 'Your cart is empty');
        }

        return view('frontend.checkout.index', compact('summary'));
    }

    /**
     * Show order confirmation page
     */
    public function confirmation(Request $request, string $orderNumber): View|RedirectResponse
    {
        $token = $request->get('token');

        if (! $token) {
            return redirect()->route('home')->with('error', 'Invalid order access');
        }

        $order = Order::with(['items.product', 'items.productVariant', 'customer'])
            ->where('order_number', $orderNumber)
            ->where('guest_token', $token)
            ->first();

        if (! $order) {
            return redirect()->route('home')->with('error', 'Order not found');
        }

        return view('frontend.checkout.confirmation', compact('order'));
    }
}
</file>

<file path="app/Http/Controllers/Frontend/HomeController.php">
<?php

// app/Http/Controllers/Frontend/HomeController.php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Product\Category;
use App\Models\Product\Product;
use Illuminate\View\View;

class HomeController extends Controller
{
    public function index(): View
    {
        $featuredProducts = Product::published()
            ->inStock()
            ->featured()
            ->limit(8)
            ->get();

        $newProducts = Product::published()
            ->inStock()
            ->orderBy('created_at', 'desc')
            ->limit(8)
            ->get();

        $categories = Category::active()
            ->root()
            ->limit(6)
            ->get();

        return view('frontend.home', compact('featuredProducts', 'newProducts', 'categories'));
    }
}
</file>

<file path="app/Http/Controllers/Frontend/OrderController.php">
<?php

// app/Http/Controllers/Frontend/OrderController.php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Customer\Customer;
use App\Models\Order\Order;
use App\Services\OrderService;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class OrderController extends Controller
{
    public function __construct(
        protected OrderService $orderService
    ) {}

    /**
     * Show customer orders (for logged-in users)
     */
    public function index(Request $request): View|RedirectResponse
    {
        if (! auth()->check()) {
            return redirect()->route('login')->with('message', 'Please log in to view your orders');
        }

        $user = auth()->user();
        $customer = Customer::where('user_id', $user->id)->first();

        if (! $customer) {
            return redirect()->route('home')->with('error', 'No orders found');
        }

        $filters = $request->only(['status', 'date_from', 'date_to']);
        $orders = $this->orderService->getCustomerOrders($customer, $filters);

        return view('frontend.orders.index', compact('orders', 'filters'));
    }

    /**
     * Show specific order details
     */
    public function show(Request $request, string $orderNumber): View|RedirectResponse
    {
        $token = $request->get('token');
        $order = null;

        if (auth()->check()) {
            // For logged-in users, find by customer
            $user = auth()->user();
            $customer = Customer::where('user_id', $user->id)->first();

            if ($customer) {
                $order = Order::with(['items.product', 'items.productVariant', 'statusHistories'])
                    ->where('order_number', $orderNumber)
                    ->where('customer_id', $customer->id)
                    ->first();
            }
        } elseif ($token) {
            // For guests, use token
            $order = Order::with(['items.product', 'items.productVariant', 'statusHistories'])
                ->where('order_number', $orderNumber)
                ->where('guest_token', $token)
                ->first();
        }

        if (! $order) {
            return redirect()->route('home')->with('error', 'Order not found or access denied');
        }

        return view('frontend.orders.show', compact('order'));
    }

    /**
     * Track order by order number and email (for guests)
     */
    public function track(Request $request): View
    {
        $order = null;

        if ($request->isMethod('post')) {
            $validated = $request->validate([
                'order_number' => 'required|string',
                'email' => 'required|email',
            ]);

            $order = Order::with(['items.product', 'items.productVariant', 'statusHistories'])
                ->where('order_number', $validated['order_number'])
                ->whereHas('customer', function ($query) use ($validated) {
                    $query->where('email', $validated['email']);
                })
                ->first();

            if (! $order) {
                return back()->withErrors(['order_number' => 'Order not found with the provided details']);
            }
        }

        return view('frontend.orders.track', compact('order'));
    }

    /**
     * Cancel an order (if allowed)
     */
    public function cancel(Request $request, string $orderNumber): RedirectResponse
    {
        $validated = $request->validate([
            'reason' => 'nullable|string|max:500',
            'token' => 'nullable|string', // For guest orders
        ]);

        $order = null;

        if (auth()->check()) {
            $user = auth()->user();
            $customer = Customer::where('user_id', $user->id)->first();

            if ($customer) {
                $order = Order::where('order_number', $orderNumber)
                    ->where('customer_id', $customer->id)
                    ->first();
            }
        } elseif ($validated['token']) {
            $order = Order::where('order_number', $orderNumber)
                ->where('guest_token', $validated['token'])
                ->first();
        }

        if (! $order) {
            return back()->with('error', 'Order not found or access denied');
        }

        if (! $order->canBeCancelled()) {
            return back()->with('error', 'This order cannot be cancelled');
        }

        try {
            $this->orderService->cancelOrder($order, $validated['reason'] ?? 'Cancelled by customer');

            return back()->with('success', 'Order has been cancelled successfully');
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to cancel order: '.$e->getMessage());
        }
    }
}
</file>

<file path="app/Http/Controllers/Frontend/ProductController.php">
<?php

// app/Http/Controllers/Frontend/ProductController.php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Product\Category;
use App\Models\Product\Product;
use Illuminate\Http\Request;
use Illuminate\View\View;

class ProductController extends Controller
{
    public function index(Request $request): View
    {
        // Use Scout search when there's a search term
        if ($request->filled('search')) {
            $query = Product::search($request->search);

            // Apply additional filters via Scout's query callback
            $query->query(function ($q) use ($request) {
                $q->with(['categories', 'variants', 'vendor'])
                    ->published()
                    ->inStock();

                // Category filter
                if ($request->filled('category')) {
                    $q->whereHas('categories', function ($subQ) use ($request) {
                        $subQ->where('slug', $request->category);
                    });
                }

                // Vendor filter
                if ($request->filled('vendor')) {
                    $q->whereHas('vendor', function ($subQ) use ($request) {
                        $subQ->where('slug', $request->vendor);
                    });
                }

                // Price filters
                if ($request->filled('min_price')) {
                    $q->where('price', '>=', $request->min_price);
                }

                if ($request->filled('max_price')) {
                    $q->where('price', '<=', $request->max_price);
                }

                // Featured filter
                if ($request->filled('featured')) {
                    $q->featured();
                }

                // Sorting (for Scout results)
                $this->applySorting($q, $request);
            });

            $products = $query->paginate(12)->withQueryString();
        } else {
            // Use regular Eloquent when no search term
            $query = Product::with(['categories', 'variants', 'vendor'])
                ->published()
                ->inStock();

            // Category filter
            if ($request->filled('category')) {
                $query->whereHas('categories', function ($q) use ($request) {
                    $q->where('slug', $request->category);
                });
            }

            // Vendor filter
            if ($request->filled('vendor')) {
                $query->whereHas('vendor', function ($q) use ($request) {
                    $q->where('slug', $request->vendor);
                });
            }

            // Price filters
            if ($request->filled('min_price')) {
                $query->where('price', '>=', $request->min_price);
            }

            if ($request->filled('max_price')) {
                $query->where('price', '<=', $request->max_price);
            }

            // Featured filter
            if ($request->filled('featured')) {
                $query->featured();
            }

            // Sorting
            $this->applySorting($query, $request);

            $products = $query->paginate(12)->withQueryString();
        }

        $categories = Category::active()->root()->with('children')->get();

        return view('frontend.products.index', compact('products', 'categories'));
    }

    public function show(Product $product): View
    {
        $product->load(['categories', 'variants.attributeValues.attribute', 'vendor']);

        // Get related products with proper table prefixes
        $relatedProducts = Product::published()
            ->inStock()
            ->whereHas('categories', function ($q) use ($product) {
                $q->whereIn('categories.id', $product->categories->pluck('id'));
            })
            ->where('products.id', '!=', $product->id)
            ->limit(4)
            ->get();

        return view('frontend.products.show', compact('product', 'relatedProducts'));
    }

    /**
     * Search suggestions for autocomplete
     */
    public function searchSuggestions(Request $request)
    {
        if (! $request->filled('q') || strlen($request->q) < 2) {
            return response()->json([]);
        }

        $suggestions = Product::search($request->q)
            ->take(8)
            ->get()
            ->map(function ($product) {
                return [
                    'id' => $product->id,
                    'name' => $product->name,
                    'slug' => $product->slug,
                    'price' => $product->price,
                    'image' => $product->getMainImage(),
                    'url' => route('products.show', $product->slug),
                ];
            });

        return response()->json($suggestions);
    }

    /**
     * Apply sorting to query
     */
    private function applySorting($query, Request $request): void
    {
        $sort = $request->get('sort', 'created_at');

        match ($sort) {
            'price_low' => $query->orderBy('price', 'asc'),
            'price_high' => $query->orderBy('price', 'desc'),
            'name' => $query->orderBy('name', 'asc'),
            'popularity' => $query->orderBy('sort_order', 'asc')->orderBy('created_at', 'desc'),
            'newest' => $query->orderBy('created_at', 'desc'),
            'featured' => $query->orderBy('is_featured', 'desc')->orderBy('created_at', 'desc'),
            default => $query->orderBy('created_at', 'desc')
        };
    }
}
</file>

<file path="app/Http/Controllers/Webhooks/StripeController.php">
<?php

// app/Http/Controllers/Webhooks/StripeController.php

namespace App\Http\Controllers\Webhooks;

use App\Http\Controllers\Controller;
use App\Services\PaymentService;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Log;

class StripeController extends Controller
{
    public function __construct(
        protected PaymentService $paymentService
    ) {}

    /**
     * Handle Stripe webhook events
     */
    public function handle(Request $request): Response
    {
        $payload = $request->getContent();
        $signature = $request->header('stripe-signature');

        if (! $signature) {
            Log::warning('Stripe webhook received without signature');

            return response('Missing signature', 400);
        }

        // Verify webhook signature
        if (! $this->paymentService->verifyWebhookSignature($payload, $signature)) {
            Log::warning('Stripe webhook signature verification failed');

            return response('Invalid signature', 400);
        }

        $event = json_decode($payload, true);

        if (! $event) {
            Log::error('Invalid JSON in Stripe webhook');

            return response('Invalid JSON', 400);
        }

        try {
            $this->paymentService->handleWebhook($event);

            Log::info('Stripe webhook processed successfully', [
                'event_id' => $event['id'],
                'event_type' => $event['type'],
            ]);

            return response('Webhook handled', 200);

        } catch (\Exception $e) {
            Log::error('Error processing Stripe webhook', [
                'event_id' => $event['id'] ?? 'unknown',
                'event_type' => $event['type'] ?? 'unknown',
                'error' => $e->getMessage(),
            ]);

            return response('Webhook processing failed', 500);
        }
    }
}
</file>

<file path="app/Http/Controllers/Controller.php">
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}
</file>

<file path="app/Models/Customer/Customer.php">
<?php

// app/Models/Customer/Customer.php

namespace App\Models\Customer;

use App\Models\Order\Order;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Customer extends Model
{
    protected $fillable = [
        'user_id',
        'stripe_customer_id',
        'first_name',
        'last_name',
        'email',
        'phone',
        'email_verified_at',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    // Relationships
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function orders(): HasMany
    {
        return $this->hasMany(Order::class);
    }

    public function addresses(): HasMany
    {
        return $this->hasMany(CustomerAddress::class);
    }

    // Helper methods
    public function getFullNameAttribute(): string
    {
        return "{$this->first_name} {$this->last_name}";
    }

    public function getDefaultBillingAddress(): ?CustomerAddress
    {
        return $this->addresses()
            ->where('type', 'billing')
            ->where('is_default', true)
            ->first();
    }

    public function getDefaultShippingAddress(): ?CustomerAddress
    {
        return $this->addresses()
            ->where('type', 'shipping')
            ->where('is_default', true)
            ->first();
    }

    public static function createFromCartData(array $customerData): self
    {
        return self::create([
            'first_name' => $customerData['first_name'],
            'last_name' => $customerData['last_name'],
            'email' => $customerData['email'],
            'phone' => $customerData['phone'] ?? null,
        ]);
    }

    public static function findOrCreateByEmail(string $email, array $customerData = []): self
    {
        $customer = self::where('email', $email)->first();

        if (! $customer) {
            $customer = self::create(array_merge([
                'email' => $email,
            ], $customerData));
        }

        return $customer;
    }
}
</file>

<file path="app/Models/Customer/CustomerAddress.php">
<?php

// app/Models/Customer/CustomerAddress.php

namespace App\Models\Customer;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class CustomerAddress extends Model
{
    protected $fillable = [
        'customer_id',
        'type',
        'first_name',
        'last_name',
        'company',
        'address_line_1',
        'address_line_2',
        'city',
        'state_county',
        'postal_code',
        'country',
        'is_default',
    ];

    protected $casts = [
        'is_default' => 'boolean',
    ];

    // Relationships
    public function customer(): BelongsTo
    {
        return $this->belongsTo(Customer::class);
    }

    // Helper methods
    public function getFullNameAttribute(): string
    {
        return "{$this->first_name} {$this->last_name}";
    }

    public function getFormattedAddressAttribute(): string
    {
        $parts = array_filter([
            $this->company,
            $this->address_line_1,
            $this->address_line_2,
            $this->city,
            $this->state_county,
            $this->postal_code,
            $this->country,
        ]);

        return implode(', ', $parts);
    }

    public function toArray(): array
    {
        return [
            'first_name' => $this->first_name,
            'last_name' => $this->last_name,
            'company' => $this->company,
            'address_line_1' => $this->address_line_1,
            'address_line_2' => $this->address_line_2,
            'city' => $this->city,
            'state_county' => $this->state_county,
            'postal_code' => $this->postal_code,
            'country' => $this->country,
        ];
    }

    public static function createFromArray(array $addressData, Customer $customer, string $type): self
    {
        return self::create(array_merge($addressData, [
            'customer_id' => $customer->id,
            'type' => $type,
        ]));
    }
}
</file>

<file path="app/Models/Order/InventoryTransaction.php">
<?php

// app/Models/Order/InventoryTransaction.php

namespace App\Models\Order;

use App\Models\Product\Product;
use App\Models\Product\ProductVariant;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class InventoryTransaction extends Model
{
    protected $fillable = [
        'product_id',
        'product_variant_id',
        'order_id',
        'type',
        'quantity_change',
        'quantity_after',
        'reference',
        'notes',
        'metadata',
    ];

    protected $casts = [
        'quantity_change' => 'integer',
        'quantity_after' => 'integer',
        'metadata' => 'array',
    ];

    // Relationships
    public function product(): BelongsTo
    {
        return $this->belongsTo(Product::class);
    }

    public function productVariant(): BelongsTo
    {
        return $this->belongsTo(ProductVariant::class);
    }

    public function order(): BelongsTo
    {
        return $this->belongsTo(Order::class);
    }

    // Helper methods
    public function isPositive(): bool
    {
        return $this->quantity_change > 0;
    }

    public function isNegative(): bool
    {
        return $this->quantity_change < 0;
    }

    public function getTypeDescription(): string
    {
        return match ($this->type) {
            'sale' => 'Sale',
            'return' => 'Return',
            'restock' => 'Restock',
            'adjustment' => 'Manual Adjustment',
            'reservation' => 'Reserved for Order',
            'release' => 'Reservation Released',
            default => ucfirst($this->type),
        };
    }

    public static function recordTransaction(
        Product|ProductVariant $item,
        string $type,
        int $quantityChange,
        ?Order $order = null,
        ?string $reference = null,
        ?string $notes = null
    ): self {
        // FIXED: Get current inventory correctly for both products and variants
        $currentInventory = $item->inventory_quantity;
        $newInventory = $currentInventory + $quantityChange;

        // Update the item's inventory
        $item->update(['inventory_quantity' => $newInventory]);

        // FIXED: Create transaction record with correct IDs
        return self::create([
            'product_id' => $item instanceof Product ? $item->id : $item->product_id,
            'product_variant_id' => $item instanceof ProductVariant ? $item->id : null,
            'order_id' => $order?->id,
            'type' => $type,
            'quantity_change' => $quantityChange,
            'quantity_after' => $newInventory,
            'reference' => $reference,
            'notes' => $notes,
        ]);
    }
}
</file>

<file path="app/Models/Order/Order.php">
<?php

// app/Models/Order/Order.php

namespace App\Models\Order;

use App\Models\Customer\Customer;
use App\Models\Payment\Payment;
use App\Models\User\Vendor;
use App\ValueObjects\Money;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Str;

class Order extends Model
{
    protected $fillable = [
        'order_number',
        'customer_id',
        'vendor_id',
        'status',
        'subtotal_amount',
        'tax_amount',
        'shipping_amount',
        'discount_amount',
        'total_amount',
        'currency',
        'tax_rate',
        'tax_inclusive',
        'stripe_payment_intent_id',
        'payment_status',
        'payment_confirmed_at',
        'customer_details',
        'billing_address',
        'shipping_address',
        'metadata',
        'notes',
        'customer_notes',
        'estimated_delivery_date',
        'shipped_at',
        'delivered_at',
        'completed_at',
        'cancelled_at',
        'guest_token',
    ];

    protected $casts = [
        'subtotal_amount' => 'integer',
        'tax_amount' => 'integer',
        'shipping_amount' => 'integer',
        'discount_amount' => 'integer',
        'total_amount' => 'integer',
        'tax_rate' => 'decimal:4',
        'tax_inclusive' => 'boolean',
        'customer_details' => 'array',
        'billing_address' => 'array',
        'shipping_address' => 'array',
        'metadata' => 'array',
        'payment_confirmed_at' => 'datetime',
        'estimated_delivery_date' => 'datetime',
        'shipped_at' => 'datetime',
        'delivered_at' => 'datetime',
        'completed_at' => 'datetime',
        'cancelled_at' => 'datetime',
    ];

    // Relationships
    public function customer(): BelongsTo
    {
        return $this->belongsTo(Customer::class);
    }

    public function vendor(): BelongsTo
    {
        return $this->belongsTo(Vendor::class);
    }

    public function items(): HasMany
    {
        return $this->hasMany(OrderItem::class);
    }

    public function statusHistories(): HasMany
    {
        return $this->hasMany(OrderStatusHistory::class)->orderBy('created_at');
    }

    public function payments(): HasMany
    {
        return $this->hasMany(Payment::class);
    }

    // Scopes
    public function scopePendingPayment($query)
    {
        return $query->where('status', 'pending_payment');
    }

    public function scopeRequiresProcessing($query)
    {
        return $query->where('status', 'processing');
    }

    public function scopeForCustomer($query, Customer $customer)
    {
        return $query->where('customer_id', $customer->id);
    }

    public function scopeByGuestToken($query, string $token)
    {
        return $query->where('guest_token', $token);
    }

    // Money value objects
    public function getSubtotalMoney(): Money
    {
        return Money::fromCents($this->subtotal_amount, $this->currency);
    }

    public function getTaxMoney(): Money
    {
        return Money::fromCents($this->tax_amount, $this->currency);
    }

    public function getShippingMoney(): Money
    {
        return Money::fromCents($this->shipping_amount, $this->currency);
    }

    public function getDiscountMoney(): Money
    {
        return Money::fromCents($this->discount_amount, $this->currency);
    }

    public function getTotalMoney(): Money
    {
        return Money::fromCents($this->total_amount, $this->currency);
    }

    // Status management
    public function canTransitionTo(string $newStatus): bool
    {
        $validTransitions = [
            'pending_payment' => ['payment_failed', 'processing', 'cancelled'],
            'payment_failed' => ['pending_payment', 'cancelled'],
            'processing' => ['partially_fulfilled', 'fulfilled', 'cancelled'],
            'partially_fulfilled' => ['fulfilled', 'cancelled'],
            'fulfilled' => ['completed'],
            'completed' => ['refunded'],
            'cancelled' => [],
            'refunded' => [],
        ];

        return in_array($newStatus, $validTransitions[$this->status] ?? []);
    }

    public function updateStatus(string $newStatus, ?string $notes = null, ?\App\Models\User $user = null): bool
    {
        if (! $this->canTransitionTo($newStatus)) {
            return false;
        }

        $oldStatus = $this->status;
        $this->status = $newStatus;

        // Set status-specific timestamps
        $now = now();
        match ($newStatus) {
            'payment_failed', 'cancelled' => $this->cancelled_at = $now,
            'fulfilled' => $this->shipped_at = $now,
            'delivered' => $this->delivered_at = $now,
            'completed' => $this->completed_at = $now,
            default => null,
        };

        $this->save();

        // Record status history
        $this->statusHistories()->create([
            'user_id' => $user?->id,
            'from_status' => $oldStatus,
            'to_status' => $newStatus,
            'notes' => $notes,
            'created_at' => $now,
        ]);

        return true;
    }

    // Payment management
    public function isPaid(): bool
    {
        return $this->payment_status === 'succeeded' && $this->payment_confirmed_at;
    }

    public function requiresPayment(): bool
    {
        return in_array($this->payment_status, ['pending', 'requires_action', 'requires_payment_method']);
    }

    public function canBeCancelled(): bool
    {
        return in_array($this->status, ['pending_payment', 'payment_failed', 'processing']);
    }

    public function canBeRefunded(): bool
    {
        return $this->isPaid() && in_array($this->status, ['processing', 'fulfilled', 'completed']);
    }

    // Item management
    public function getTotalItems(): int
    {
        return $this->items()->sum('quantity');
    }

    public function getTotalFulfilledItems(): int
    {
        return $this->items()->sum('quantity_fulfilled');
    }

    public function isFullyFulfilled(): bool
    {
        return $this->getTotalItems() === $this->getTotalFulfilledItems();
    }

    public function isPartiallyFulfilled(): bool
    {
        $fulfilled = $this->getTotalFulfilledItems();

        return $fulfilled > 0 && $fulfilled < $this->getTotalItems();
    }

    // Static factory methods
    public static function generateOrderNumber(): string
    {
        do {
            $number = 'ORD-'.date('Y').'-'.str_pad(mt_rand(1, 999999), 6, '0', STR_PAD_LEFT);
        } while (self::where('order_number', $number)->exists());

        return $number;
    }

    public static function generateGuestToken(): string
    {
        return Str::random(32);
    }

    protected static function boot()
    {
        parent::boot();

        static::creating(function ($order) {
            if (! $order->order_number) {
                $order->order_number = self::generateOrderNumber();
            }

            if (! $order->guest_token) {
                $order->guest_token = self::generateGuestToken();
            }
        });
    }
}
</file>

<file path="app/Models/Order/OrderItem.php">
<?php

// app/Models/Order/OrderItem.php

namespace App\Models\Order;

use App\Models\Product\Product;
use App\Models\Product\ProductVariant;
use App\ValueObjects\Money;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class OrderItem extends Model
{
    protected $fillable = [
        'order_id',
        'product_id',
        'product_variant_id',
        'product_name',
        'product_sku',
        'product_description',
        'variant_name',
        'variant_sku',
        'variant_attributes',
        'unit_price',
        'unit_cost',
        'compare_price',
        'quantity',
        'quantity_fulfilled',
        'quantity_cancelled',
        'quantity_refunded',
        'line_total',
        'tax_amount',
        'product_image',
        'fulfillment_details',
        'fulfilled_at',
    ];

    protected $casts = [
        'unit_price' => 'integer',
        'unit_cost' => 'integer',
        'compare_price' => 'integer',
        'quantity' => 'integer',
        'quantity_fulfilled' => 'integer',
        'quantity_cancelled' => 'integer',
        'quantity_refunded' => 'integer',
        'line_total' => 'integer',
        'tax_amount' => 'integer',
        'variant_attributes' => 'array',
        'fulfillment_details' => 'array',
        'fulfilled_at' => 'datetime',
    ];

    // Relationships
    public function order(): BelongsTo
    {
        return $this->belongsTo(Order::class);
    }

    public function product(): BelongsTo
    {
        return $this->belongsTo(Product::class);
    }

    public function productVariant(): BelongsTo
    {
        return $this->belongsTo(ProductVariant::class);
    }

    // Money value objects
    public function getUnitPriceMoney(): Money
    {
        return Money::fromCents($this->unit_price, $this->order->currency);
    }

    public function getLineTotalMoney(): Money
    {
        return Money::fromCents($this->line_total, $this->order->currency);
    }

    public function getTaxMoney(): Money
    {
        return Money::fromCents($this->tax_amount, $this->order->currency);
    }

    // Helper methods
    public function getDisplayName(): string
    {
        return $this->variant_name ?: $this->product_name;
    }

    public function getSku(): string
    {
        return $this->variant_sku ?: $this->product_sku;
    }

    public function getQuantityPending(): int
    {
        return $this->quantity - $this->quantity_fulfilled - $this->quantity_cancelled;
    }

    public function canBeFulfilled(): bool
    {
        return $this->getQuantityPending() > 0;
    }

    public function getDiscountPercentage(): ?float
    {
        if (! $this->compare_price || $this->compare_price <= $this->unit_price) {
            return null;
        }

        return round((($this->compare_price - $this->unit_price) / $this->compare_price) * 100);
    }

    public static function createFromCartItem(array $cartItem, Order $order): self
    {
        // Load the actual product/variant to get current data
        $product = Product::find($cartItem['product_id']);
        $variant = isset($cartItem['variant_id']) ? ProductVariant::find($cartItem['variant_id']) : null;

        $item = $variant ?: $product;

        return self::create([
            'order_id' => $order->id,
            'product_id' => $product->id,
            'product_variant_id' => $variant?->id,
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'product_description' => $product->short_description,
            'variant_name' => $variant?->getDisplayName(),
            'variant_sku' => $variant?->sku,
            'variant_attributes' => $variant?->attributeValues?->mapWithKeys(fn ($av) => [
                $av->attribute->name => $av->display_label,
            ])->toArray(),
            'unit_price' => (int) ($item->price * 100), // Convert to pence
            'unit_cost' => $item->cost_price ? (int) ($item->cost_price * 100) : null,
            'compare_price' => $item->compare_price ? (int) ($item->compare_price * 100) : null,
            'quantity' => $cartItem['quantity'],
            'line_total' => (int) ($item->price * $cartItem['quantity'] * 100),
            'tax_amount' => $order->tax_inclusive ?
                (int) ($item->price * $cartItem['quantity'] * 100 * $order->tax_rate / (1 + $order->tax_rate)) :
                (int) ($item->price * $cartItem['quantity'] * 100 * $order->tax_rate),
            'product_image' => $item->image ?? $product->image,
        ]);
    }
}
</file>

<file path="app/Models/Order/OrderStatusHistory.php">
<?php

// app/Models/Order/OrderStatusHistory.php

namespace App\Models\Order;

use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class OrderStatusHistory extends Model
{
    public $timestamps = false;

    protected $fillable = [
        'order_id',
        'user_id',
        'from_status',
        'to_status',
        'notes',
        'metadata',
        'customer_notified',
        'created_at',
    ];

    protected $casts = [
        'metadata' => 'array',
        'customer_notified' => 'boolean',
        'created_at' => 'datetime',
    ];

    // Relationships
    public function order(): BelongsTo
    {
        return $this->belongsTo(Order::class);
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    // Helper methods
    public function getStatusChangeDescription(): string
    {
        $from = $this->from_status ? str_replace('_', ' ', ucfirst($this->from_status)) : 'Created';
        $to = str_replace('_', ' ', ucfirst($this->to_status));

        return "Status changed from {$from} to {$to}";
    }

    public function getUserName(): string
    {
        return $this->user?->name ?? 'System';
    }
}
</file>

<file path="app/Models/Payment/Payment.php">
<?php

// app/Models/Payment/Payment.php

namespace App\Models\Payment;

use App\Models\Order\Order;
use App\ValueObjects\Money;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Payment extends Model
{
    protected $fillable = [
        'order_id',
        'stripe_payment_intent_id',
        'stripe_payment_method_id',
        'stripe_customer_id',
        'type',
        'status',
        'amount',
        'amount_received',
        'application_fee',
        'currency',
        'payment_method_type',
        'payment_method_details',
        'stripe_data',
        'processed_at',
        'failure_reason',
        'failure_message',
    ];

    protected $casts = [
        'amount' => 'integer',
        'amount_received' => 'integer',
        'application_fee' => 'integer',
        'payment_method_details' => 'array',
        'stripe_data' => 'array',
        'processed_at' => 'datetime',
    ];

    // Relationships
    public function order(): BelongsTo
    {
        return $this->belongsTo(Order::class);
    }

    // Money value objects
    public function getAmountMoney(): Money
    {
        return Money::fromCents($this->amount, $this->currency);
    }

    public function getAmountReceivedMoney(): ?Money
    {
        return $this->amount_received ? Money::fromCents($this->amount_received, $this->currency) : null;
    }

    // Helper methods
    public function isSuccessful(): bool
    {
        return $this->status === 'succeeded';
    }

    public function isFailed(): bool
    {
        return in_array($this->status, ['failed', 'cancelled']);
    }

    public function requiresAction(): bool
    {
        return in_array($this->status, ['requires_action', 'requires_confirmation', 'requires_payment_method']);
    }

    public function getPaymentMethodDescription(): string
    {
        if (! $this->payment_method_details) {
            return 'Unknown payment method';
        }

        $details = $this->payment_method_details;

        if ($this->payment_method_type === 'card') {
            $brand = ucfirst($details['brand'] ?? 'card');
            $last4 = $details['last4'] ?? '****';

            return "{$brand} ending in {$last4}";
        }

        return ucfirst($this->payment_method_type ?? 'payment method');
    }

    public static function createFromStripePaymentIntent(array $paymentIntent, Order $order): self
    {
        $paymentMethod = $paymentIntent['charges']['data'][0]['payment_method_details'] ?? null;

        return self::create([
            'order_id' => $order->id,
            'stripe_payment_intent_id' => $paymentIntent['id'],
            'stripe_payment_method_id' => $paymentIntent['payment_method'] ?? null,
            'stripe_customer_id' => $paymentIntent['customer'] ?? null,
            'type' => 'payment',
            'status' => $paymentIntent['status'],
            'amount' => $paymentIntent['amount'],
            'amount_received' => $paymentIntent['amount_received'] ?? null,
            'currency' => strtoupper($paymentIntent['currency']),
            'payment_method_type' => $paymentMethod['type'] ?? null,
            'payment_method_details' => $paymentMethod ? [
                'brand' => $paymentMethod['card']['brand'] ?? null,
                'last4' => $paymentMethod['card']['last4'] ?? null,
                'exp_month' => $paymentMethod['card']['exp_month'] ?? null,
                'exp_year' => $paymentMethod['card']['exp_year'] ?? null,
            ] : null,
            'stripe_data' => $paymentIntent,
            'processed_at' => $paymentIntent['status'] === 'succeeded' ? now() : null,
        ]);
    }
}
</file>

<file path="app/Models/Product/Attribute.php">
<?php

// app/Models/Product/Attribute.php

namespace App\Models\Product;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Spatie\Sluggable\HasSlug;
use Spatie\Sluggable\SlugOptions;

class Attribute extends Model
{
    use HasSlug;

    protected $fillable = [
        'name', 'slug', 'type', 'display_type', 'options', 'is_required',
        'is_variant', 'is_filterable', 'sort_order',
    ];

    protected $casts = [
        'options' => 'array',
        'is_required' => 'boolean',
        'is_variant' => 'boolean',
        'is_filterable' => 'boolean',
    ];

    public function getSlugOptions(): SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('name')
            ->saveSlugsTo('slug');
    }

    public function values(): HasMany
    {
        return $this->hasMany(AttributeValue::class)->orderBy('sort_order');
    }

    public function products(): BelongsToMany
    {
        return $this->belongsToMany(Product::class, 'product_attributes')
            ->withPivot('is_required', 'is_variant', 'sort_order');
    }

    public function isColorSwatch(): bool
    {
        return $this->display_type === 'color_swatch';
    }

    public function isButton(): bool
    {
        return $this->display_type === 'button';
    }
}
</file>

<file path="app/Models/Product/AttributeValue.php">
<?php

namespace App\Models\Product;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class AttributeValue extends Model
{
    protected $fillable = [
        'attribute_id', 'value', 'label', 'color_code', 'sort_order',
    ];

    public function attribute(): BelongsTo
    {
        return $this->belongsTo(Attribute::class);
    }

    public function variants(): BelongsToMany
    {
        return $this->belongsToMany(ProductVariant::class, 'variant_attribute_values');
    }

    public function getDisplayLabelAttribute(): string
    {
        return $this->label ?? $this->value;
    }
}
</file>

<file path="app/Models/Product/Category.php">
<?php

namespace App\Models\Product;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Spatie\Sluggable\HasSlug;
use Spatie\Sluggable\SlugOptions;

class Category extends Model
{
    use HasSlug;

    protected $fillable = [
        'name', 'slug', 'description', 'image',
        'parent_id', 'sort_order', 'is_active', 'seo_meta',
    ];

    protected $casts = [
        'is_active' => 'boolean',
        'seo_meta' => 'array',
    ];

    public function getSlugOptions(): SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('name')
            ->saveSlugsTo('slug');
    }

    public function parent(): BelongsTo
    {
        return $this->belongsTo(Category::class, 'parent_id');
    }

    public function children(): HasMany
    {
        return $this->hasMany(Category::class, 'parent_id')->orderBy('sort_order');
    }

    public function products(): BelongsToMany
    {
        return $this->belongsToMany(Product::class, 'product_categories');
    }

    public function scopeActive($query)
    {
        return $query->where('is_active', true);
    }

    public function scopeRoot($query)
    {
        return $query->whereNull('parent_id');
    }

    public function getFullPathAttribute(): string
    {
        $path = [$this->name];
        $parent = $this->parent;

        while ($parent) {
            array_unshift($path, $parent->name);
            $parent = $parent->parent;
        }

        return implode(' > ', $path);
    }
}
</file>

<file path="app/Models/Product/Product.php">
<?php

// app/Models/Product/Product.php - Updated with smart stock management

namespace App\Models\Product;

use App\Models\User\Vendor;
use App\Traits\HasSEO;
use App\Traits\Searchable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Spatie\Sluggable\HasSlug;
use Spatie\Sluggable\SlugOptions;

class Product extends Model
{
    use HasSEO, HasSlug, Searchable;

    protected $fillable = [
        'vendor_id', 'name', 'slug', 'description', 'short_description',
        'sku', 'type', 'status', 'price', 'compare_price', 'cost_price',
        'track_inventory', 'inventory_quantity', 'low_stock_threshold',
        'weight', 'dimensions', 'seo_meta', 'tags', 'image', 'gallery',
        'is_featured', 'sort_order', 'published_at',
    ];

    protected $casts = [
        'price' => 'decimal:2',
        'compare_price' => 'decimal:2',
        'cost_price' => 'decimal:2',
        'weight' => 'decimal:2',
        'dimensions' => 'array',
        'seo_meta' => 'array',
        'tags' => 'array',
        'gallery' => 'array',
        'is_featured' => 'boolean',
        'track_inventory' => 'boolean',
        'published_at' => 'datetime',
    ];

    public function getSlugOptions(): SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('name')
            ->saveSlugsTo('slug');
    }

    // Relationships
    public function vendor(): BelongsTo
    {
        return $this->belongsTo(Vendor::class);
    }

    public function variants(): HasMany
    {
        return $this->hasMany(ProductVariant::class);
    }

    public function categories(): BelongsToMany
    {
        return $this->belongsToMany(Category::class, 'product_categories');
    }

    public function attributes(): BelongsToMany
    {
        return $this->belongsToMany(Attribute::class, 'product_attributes')
            ->withPivot('is_required', 'is_variant');
    }

    // Scopes
    public function scopePublished($query)
    {
        return $query->where('status', 'published')
            ->where('published_at', '<=', now());
    }

    public function scopeFeatured($query)
    {
        return $query->where('is_featured', true);
    }

    public function scopeInStock($query)
    {
        return $query->where(function ($q) {
            // Products that don't track inventory are always "in stock"
            $q->where('track_inventory', false)
              // OR simple products with inventory
                ->orWhere(function ($subQ) {
                    $subQ->where('track_inventory', true)
                        ->where('type', 'simple')
                        ->where('inventory_quantity', '>', 0);
                })
              // OR variable products that have variants with inventory
                ->orWhere(function ($subQ) {
                    $subQ->where('track_inventory', true)
                        ->where('type', 'variable')
                        ->whereHas('variants', function ($variantQ) {
                            $variantQ->where('inventory_quantity', '>', 0);
                        });
                });
        });
    }

    public function scopeByVendor($query, $vendorId)
    {
        return $query->where('vendor_id', $vendorId);
    }

    public function scopeLowStock($query)
    {
        return $query->where(function ($q) {
            // Simple products with low stock
            $q->where(function ($subQ) {
                $subQ->where('track_inventory', true)
                    ->whereDoesntHave('variants')
                    ->whereRaw('inventory_quantity <= low_stock_threshold');
            })
            // OR variable products where total variant stock is low
                ->orWhere(function ($subQ) {
                    $subQ->where('track_inventory', true)
                        ->whereHas('variants')
                        ->whereRaw('(SELECT SUM(inventory_quantity) FROM product_variants WHERE product_id = products.id) <= low_stock_threshold');
                });
        });
    }

    // Helper methods
    public function isVariable(): bool
    {
        return $this->type === 'variable';
    }

    public function hasVariants(): bool
    {
        return $this->variants()->exists();
    }

    public function getMainVariant(): ?ProductVariant
    {
        return $this->variants()->orderBy('position')->first();
    }

    public function isInStock(): bool
    {
        if (! $this->track_inventory) {
            return true;
        }

        if ($this->hasVariants()) {
            return $this->variants()->where('inventory_quantity', '>', 0)->exists();
        }

        return $this->inventory_quantity > 0;
    }

    /**
     * Get the effective stock quantity for display purposes
     * - For simple products: returns inventory_quantity
     * - For products with variants: returns sum of all variant quantities
     * - For products not tracking inventory: returns null
     */
    public function getEffectiveStockQuantity(): ?int
    {
        if (! $this->track_inventory) {
            return null;
        }

        if ($this->hasVariants()) {
            return $this->variants()->sum('inventory_quantity');
        }

        return $this->inventory_quantity;
    }

    /**
     * Get stock status for display purposes
     */
    public function getStockStatus(): string
    {
        if (! $this->track_inventory) {
            return 'in_stock';
        }

        $effectiveStock = $this->getEffectiveStockQuantity();

        if ($effectiveStock <= 0) {
            return 'out_of_stock';
        }

        if ($effectiveStock <= $this->low_stock_threshold) {
            return 'low_stock';
        }

        return 'in_stock';
    }

    /**
     * Check if product is considered low stock
     */
    public function isLowStock(): bool
    {
        if (! $this->track_inventory) {
            return false;
        }

        $effectiveStock = $this->getEffectiveStockQuantity();

        return $effectiveStock > 0 && $effectiveStock <= $this->low_stock_threshold;
    }

    /**
     * Check if product is out of stock
     */
    public function isOutOfStock(): bool
    {
        if (! $this->track_inventory) {
            return false;
        }

        return $this->getEffectiveStockQuantity() <= 0;
    }

    /**
     * Get stock color for badges/display
     */
    public function getStockColor(): string
    {
        $status = $this->getStockStatus();

        return match ($status) {
            'out_of_stock' => 'danger',
            'low_stock' => 'warning',
            'in_stock' => 'success',
            default => 'secondary'
        };
    }

    /**
     * Get human-readable stock text
     */
    public function getStockText(): string
    {
        if (! $this->track_inventory) {
            return 'In Stock';
        }

        $effectiveStock = $this->getEffectiveStockQuantity();

        if ($effectiveStock <= 0) {
            return 'Out of Stock';
        }

        if ($this->hasVariants()) {
            $inStockVariants = $this->variants()->where('inventory_quantity', '>', 0)->count();
            $totalVariants = $this->variants()->count();

            return "{$effectiveStock} units ({$inStockVariants}/{$totalVariants} variants in stock)";
        }

        return "{$effectiveStock} units";
    }

    public function getDiscountPercentage(): ?float
    {
        if (! $this->compare_price || $this->compare_price <= $this->price) {
            return null;
        }

        return round((($this->compare_price - $this->price) / $this->compare_price) * 100);
    }

    public function getMainImage(): ?string
    {
        return $this->image ?? ($this->gallery && count($this->gallery) > 0 ? $this->gallery[0] : null);
    }

    public function getVendorName(): string
    {
        return $this->vendor?->business_name ?? 'Main Store';
    }
}
</file>

<file path="app/Models/Product/ProductVariant.php">
<?php

// app/Models/Product/ProductVariant.php

namespace App\Models\Product;

use App\ValueObjects\SKU;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class ProductVariant extends Model
{
    protected $fillable = [
        'product_id', 'sku', 'barcode', 'price', 'compare_price',
        'cost_price', 'inventory_quantity', 'weight', 'dimensions',
        'image', 'position', 'is_active',
    ];

    protected $casts = [
        'price' => 'decimal:2',
        'compare_price' => 'decimal:2',
        'cost_price' => 'decimal:2',
        'weight' => 'decimal:2',
        'dimensions' => 'array',
        'is_active' => 'boolean',
    ];

    public function product(): BelongsTo
    {
        return $this->belongsTo(Product::class);
    }

    public function attributeValues(): BelongsToMany
    {
        return $this->belongsToMany(AttributeValue::class, 'variant_attribute_values');
    }

    public function generateSKU(): string
    {
        return SKU::generate($this->product, $this->attributeValues);
    }

    public function ensureUniqueSKU(): string
    {
        $baseSku = $this->generateSKU();

        return SKU::ensureUnique($baseSku, 'product_variants', 'sku');
    }

    public function isInStock(): bool
    {
        return $this->inventory_quantity > 0;
    }

    public function getDisplayName(): string
    {
        $attributeNames = $this->attributeValues()
            ->with('attribute')
            ->get()
            ->map(fn ($av) => $av->attribute->name.': '.$av->display_label)
            ->implode(', ');

        return $this->product->name.($attributeNames ? " ({$attributeNames})" : '');
    }

    public function getDiscountPercentage(): ?float
    {
        if (! $this->compare_price || $this->compare_price <= $this->price) {
            return null;
        }

        return round((($this->compare_price - $this->price) / $this->compare_price) * 100);
    }
}
</file>

<file path="app/Models/User/Vendor.php">
<?php

namespace App\Models\User;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Spatie\Sluggable\HasSlug;
use Spatie\Sluggable\SlugOptions;

class Vendor extends Model
{
    use HasSlug;

    protected $fillable = [
        'user_id', 'business_name', 'slug', 'description',
        'business_email', 'business_phone', 'business_address',
        'tax_id', 'status', 'commission_rate',
    ];

    protected $casts = [
        'business_address' => 'array',
        'commission_rate' => 'decimal:2',
    ];

    public function getSlugOptions(): SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('business_name')
            ->saveSlugsTo('slug');
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(\App\Models\User::class);
    }

    public function products(): HasMany
    {
        return $this->hasMany(\App\Models\Product\Product::class);
    }

    public function scopeApproved($query)
    {
        return $query->where('status', 'approved');
    }
}
</file>

<file path="app/Models/User.php">
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }
}
</file>

<file path="app/Services/CartService.php">
<?php

// app/Services/CartService.php

namespace App\Services;

use App\Models\Product\Product;
use App\Models\Product\ProductVariant;
use App\ValueObjects\Money;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Session;

class CartService
{
    protected string $sessionKey = 'shopping_cart';

    public function addItem(Product|ProductVariant $item, int $quantity = 1): void
    {
        $cart = $this->getCart();
        $key = $this->getItemKey($item);

        // Convert collection to array for modification
        $cartArray = $cart->toArray();

        if (isset($cartArray[$key])) {
            $cartArray[$key]['quantity'] += $quantity;
        } else {
            // Determine if this is a product or variant
            if ($item instanceof ProductVariant) {
                $product = $item->product;
                $cartArray[$key] = [
                    'type' => 'variant',
                    'id' => $item->id,
                    'product_id' => $product->id,
                    'variant_id' => $item->id, // Explicitly set variant_id
                    'name' => $item->getDisplayName(),
                    'price' => $item->price,
                    'quantity' => $quantity,
                    'image' => $item->image ?? $product->image,
                    'sku' => $item->sku,
                ];
            } else {
                // Simple product - FIXED: Make sure variant_id is properly null
                $cartArray[$key] = [
                    'type' => 'product',
                    'id' => $item->id,
                    'product_id' => $item->id,
                    'variant_id' => null, // IMPORTANT: Explicitly set to null
                    'name' => $item->name,
                    'price' => $item->price,
                    'quantity' => $quantity,
                    'image' => $item->image,
                    'sku' => $item->sku,
                ];
            }
        }

        // Save the modified array back to session
        Session::put($this->sessionKey, $cartArray);

        Log::info('Item added to cart', [
            'key' => $key,
            'item_type' => $item instanceof ProductVariant ? 'variant' : 'product',
            'item_id' => $item->id,
            'product_id' => $item instanceof ProductVariant ? $item->product_id : $item->id,
            'variant_id' => $item instanceof ProductVariant ? $item->id : null, // Log this for debugging
            'quantity' => $quantity,
            'cart_total_items' => $this->getItemCount(),
        ]);
    }

    public function removeItem(string $key): void
    {
        $cartArray = $this->getCart()->toArray();
        unset($cartArray[$key]);
        Session::put($this->sessionKey, $cartArray);
    }

    public function updateQuantity(string $key, int $quantity): void
    {
        if ($quantity <= 0) {
            $this->removeItem($key);

            return;
        }

        $cartArray = $this->getCart()->toArray();
        if (isset($cartArray[$key])) {
            $cartArray[$key]['quantity'] = $quantity;
            Session::put($this->sessionKey, $cartArray);
        }
    }

    public function getCart(): Collection
    {
        $cart = collect(Session::get($this->sessionKey, []));

        // Ensure all cart items have the required fields
        return $cart->map(function ($item, $key) {
            // Ensure backward compatibility and proper structure
            return array_merge([
                'type' => 'product',
                'id' => null,
                'product_id' => null,
                'variant_id' => null,
                'name' => 'Unknown Item',
                'price' => 0,
                'quantity' => 1,
                'image' => null,
                'sku' => null,
            ], $item);
        });
    }

    public function getTotal(): Money
    {
        $total = $this->getCart()->sum(fn ($item) => $item['price'] * $item['quantity']);

        return new Money($total);
    }

    public function getItemCount(): int
    {
        return $this->getCart()->sum('quantity');
    }

    public function clear(): void
    {
        Session::forget($this->sessionKey);
    }

    private function getItemKey(Product|ProductVariant $item): string
    {
        return $item instanceof Product ? "product_{$item->id}" : "variant_{$item->id}";
    }

    /**
     * Validate cart items and remove any that are no longer valid
     */
    public function validateAndCleanCart(): array
    {
        $cart = $this->getCart();
        $removedItems = [];
        $validCart = [];

        foreach ($cart as $key => $item) {
            try {
                if (isset($item['variant_id']) && $item['variant_id']) {
                    // Validate variant
                    $variant = ProductVariant::with('product')->find($item['variant_id']);
                    if (! $variant || ! $variant->is_active || $variant->product->status !== 'published') {
                        $removedItems[] = $item;

                        continue;
                    }
                } else {
                    // Validate simple product
                    $product = Product::find($item['product_id']);
                    if (! $product || $product->status !== 'published') {
                        $removedItems[] = $item;

                        continue;
                    }
                }

                $validCart[$key] = $item;
            } catch (\Exception $e) {
                Log::warning('Error validating cart item', [
                    'item' => $item,
                    'error' => $e->getMessage(),
                ]);
                $removedItems[] = $item;
            }
        }

        // Update cart with only valid items
        Session::put($this->sessionKey, $validCart);

        return $removedItems;
    }
}
</file>

<file path="app/Services/CheckoutService.php">
<?php

// app/Services/CheckoutService.php

namespace App\Services;

use App\Models\Customer\Customer;
use App\Models\Customer\CustomerAddress;
use App\Models\Order\Order;
use App\Models\Product\Product;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class CheckoutService
{
    public function __construct(
        protected CartService $cartService,
        protected OrderService $orderService,
        protected PaymentService $paymentService
    ) {}

    /**
     * Initialize checkout process
     */
    public function initializeCheckout(array $checkoutData): array
    {
        $cart = $this->cartService->getCart();

        if ($cart->isEmpty()) {
            throw new \InvalidArgumentException('Cart is empty');
        }

        Log::info('Cart contents for validation', ['cart' => $cart->toArray()]);

        // Validate stock availability
        $this->validateCartStock($cart);

        // Find or create customer
        $customer = $this->findOrCreateCustomer($checkoutData['customer']);

        // Create or update addresses
        $billingAddress = $this->createOrUpdateAddress($customer, $checkoutData['billing_address'], 'billing');
        $shippingAddress = $this->createOrUpdateAddress($customer, $checkoutData['shipping_address'] ?? $checkoutData['billing_address'], 'shipping');

        // Create the order
        $order = $this->orderService->createOrder(
            $customer,
            $cart,
            $billingAddress->toArray(),
            $shippingAddress->toArray(),
            $checkoutData['order_data'] ?? []
        );

        // Create Stripe Payment Intent
        $paymentIntent = $this->paymentService->createPaymentIntent($order, $customer);

        return [
            'order' => $order,
            'customer' => $customer,
            'payment_intent' => $paymentIntent,
            'client_secret' => $paymentIntent['client_secret'],
        ];
    }

    /**
     * Complete checkout after successful payment
     */
    public function completeCheckout(Order $order): array
    {
        return DB::transaction(function () use ($order) {
            // Update order status to processing
            $this->orderService->updateOrderStatus($order, 'processing', 'Payment confirmed');

            // Clear the cart
            $this->cartService->clear();

            return [
                'order' => $order->fresh(['items', 'customer']),
                'success' => true,
                'message' => 'Order placed successfully',
            ];
        });
    }

    /**
     * Handle checkout failure
     */
    public function handleCheckoutFailure(Order $order, string $reason): void
    {
        $this->orderService->updateOrderStatus($order, 'payment_failed', $reason);
    }

    protected function validateCartStock(\Illuminate\Support\Collection $cart): void
    {
        foreach ($cart as $key => $item) {
            Log::info('Validating cart item', ['key' => $key, 'item' => $item]);

            // Ensure we have a product_id
            if (! isset($item['product_id']) || ! $item['product_id']) {
                throw new \InvalidArgumentException("Cart item missing product_id: {$key}");
            }

            // Load the product with necessary relationships
            $product = Product::with(['variants'])->find($item['product_id']);

            if (! $product) {
                throw new \InvalidArgumentException("Product {$item['product_id']} no longer exists");
            }

            Log::info('Product found', [
                'product_id' => $product->id,
                'name' => $product->name,
                'type' => $product->type,
                'track_inventory' => $product->track_inventory,
                'inventory_quantity' => $product->inventory_quantity,
                'has_variants' => $product->hasVariants(),
                'variant_count' => $product->variants->count(),
            ]);

            if ($product->status !== 'published') {
                throw new \InvalidArgumentException("Product {$product->name} is no longer available");
            }

            // Determine stock validation strategy
            if (! $product->track_inventory) {
                Log::info('Product does not track inventory, skipping stock validation', ['product_id' => $product->id]);

                continue; // Skip stock validation for products that don't track inventory
            }

            // FIXED: Better logic for determining if this is a variant or simple product
            // Check if the cart item has a variant_id AND the product actually has variants
            if (isset($item['variant_id']) && $item['variant_id'] && $product->hasVariants()) {
                $this->validateVariantStock($product, $item);
            } else {
                // This is either a simple product or a product where no variant was selected
                $this->validateSimpleProductStock($product, $item);
            }
        }
    }

    /**
     * Validate stock for a simple product (no variants) - UPDATED
     */
    protected function validateSimpleProductStock(Product $product, array $item): void
    {
        // FIXED: Better validation logic for simple products
        // If the product has variants but no variant was selected in the cart, that's an error
        if ($product->hasVariants() && (! isset($item['variant_id']) || ! $item['variant_id'])) {
            throw new \InvalidArgumentException(
                "Product {$product->name} has variants but no variant was selected. Please choose a specific variant."
            );
        }

        // If this is truly a simple product (no variants), check its stock
        if (! $product->hasVariants()) {
            if ($product->track_inventory && $product->inventory_quantity < $item['quantity']) {
                throw new \InvalidArgumentException(
                    "Insufficient stock for {$product->name}. Available: {$product->inventory_quantity}, Requested: {$item['quantity']}"
                );
            }

            Log::info('Simple product stock validated', [
                'product_id' => $product->id,
                'available' => $product->inventory_quantity,
                'requested' => $item['quantity'],
            ]);
        }
    }

    /**
     * Validate stock for a product variant
     */
    protected function validateVariantStock(Product $product, array $item): void
    {
        $variant = $product->variants()->find($item['variant_id']);

        if (! $variant) {
            throw new \InvalidArgumentException("Product variant {$item['variant_id']} no longer exists for product {$product->name}");
        }

        if (! $variant->is_active) {
            throw new \InvalidArgumentException("Product variant is no longer available for {$product->name}");
        }

        // Check variant stock
        if ($product->track_inventory && $variant->inventory_quantity < $item['quantity']) {
            $variantName = $variant->getDisplayName();
            throw new \InvalidArgumentException(
                "Insufficient stock for {$variantName}. Available: {$variant->inventory_quantity}, Requested: {$item['quantity']}"
            );
        }

        Log::info('Variant stock validated', [
            'variant_id' => $variant->id,
            'available' => $variant->inventory_quantity,
            'requested' => $item['quantity'],
        ]);
    }

    /**
     * Find existing customer or create new one
     */
    protected function findOrCreateCustomer(array $customerData): Customer
    {
        // Try to find existing customer by email
        $customer = Customer::where('email', $customerData['email'])->first();

        if ($customer) {
            // Update customer data if provided
            $customer->update(array_filter([
                'first_name' => $customerData['first_name'] ?? $customer->first_name,
                'last_name' => $customerData['last_name'] ?? $customer->last_name,
                'phone' => $customerData['phone'] ?? $customer->phone,
            ]));
        } else {
            // Create new customer
            $customer = Customer::create([
                'first_name' => $customerData['first_name'],
                'last_name' => $customerData['last_name'],
                'email' => $customerData['email'],
                'phone' => $customerData['phone'] ?? null,
            ]);
        }

        return $customer;
    }

    /**
     * Create or update customer address
     */
    protected function createOrUpdateAddress(Customer $customer, array $addressData, string $type): CustomerAddress
    {
        // Check if this exact address already exists
        $existingAddress = $customer->addresses()
            ->where('type', $type)
            ->where('address_line_1', $addressData['address_line_1'])
            ->where('postal_code', $addressData['postal_code'])
            ->first();

        if ($existingAddress) {
            return $existingAddress;
        }

        // Create new address
        return CustomerAddress::create(array_merge($addressData, [
            'customer_id' => $customer->id,
            'type' => $type,
            'is_default' => ! $customer->addresses()->where('type', $type)->exists(), // First address of this type is default
        ]));
    }

    /**
     * Get checkout summary
     */
    public function getCheckoutSummary(): array
    {
        $cart = $this->cartService->getCart();
        $total = $this->cartService->getTotal();

        $taxRate = 0.20; // 20% VAT
        $taxAmount = $total->value * $taxRate / (1 + $taxRate); // Tax included in price
        $subtotal = $total->value - $taxAmount;

        return [
            'items' => $cart,
            'item_count' => $cart->sum('quantity'),
            'subtotal' => $subtotal,
            'tax_amount' => $taxAmount,
            'tax_rate' => $taxRate,
            'shipping_amount' => 0, // TODO: Calculate shipping
            'total' => $total->value,
            'currency' => 'GBP',
        ];
    }
}
</file>

<file path="app/Services/InventoryService.php">
<?php

// app/Services/InventoryService.php

namespace App\Services;

use App\Models\Order\InventoryTransaction;
use App\Models\Order\Order;
use App\Models\Product\Product;
use App\Models\Product\ProductVariant;
use Illuminate\Support\Facades\DB;

class InventoryService
{
    /**
     * Reserve inventory for an order - FIXED
     */
    public function reserveInventoryForOrder(Order $order): void
    {
        DB::transaction(function () use ($order) {
            foreach ($order->items as $orderItem) {
                // FIXED: Determine the item and whether to track inventory
                if ($orderItem->productVariant) {
                    // This is a variant order item
                    $item = $orderItem->productVariant;
                    $shouldTrackInventory = $orderItem->product->track_inventory;
                } else {
                    // This is a simple product order item
                    $item = $orderItem->product;
                    $shouldTrackInventory = $orderItem->product->track_inventory;
                }

                if ($shouldTrackInventory) {
                    $this->reserveInventory(
                        $item,
                        $orderItem->quantity,
                        $order,
                        "Reserved for order {$order->order_number}"
                    );
                }
            }
        });
    }

    /**
     * Release reserved inventory for an order - FIXED
     */
    public function releaseReservedInventory(Order $order): void
    {
        DB::transaction(function () use ($order) {
            foreach ($order->items as $orderItem) {
                // FIXED: Same logic for releasing
                if ($orderItem->productVariant) {
                    $item = $orderItem->productVariant;
                    $shouldTrackInventory = $orderItem->product->track_inventory;
                } else {
                    $item = $orderItem->product;
                    $shouldTrackInventory = $orderItem->product->track_inventory;
                }

                if ($shouldTrackInventory) {
                    $this->releaseInventory(
                        $item,
                        $orderItem->quantity,
                        $order,
                        "Released from cancelled order {$order->order_number}"
                    );
                }
            }
        });
    }

    /**
     * Record a sale (when item is actually fulfilled)
     */
    public function recordSale(Product|ProductVariant $item, int $quantity, Order $order): void
    {
        InventoryTransaction::recordTransaction(
            $item,
            'sale',
            -$quantity,
            $order,
            $order->order_number,
            "Sale for order {$order->order_number}"
        );
    }

    /**
     * Record a return
     */
    public function recordReturn(Product|ProductVariant $item, int $quantity, Order $order): void
    {
        InventoryTransaction::recordTransaction(
            $item,
            'return',
            $quantity,
            $order,
            $order->order_number,
            "Return for order {$order->order_number}"
        );
    }

    /**
     * Reserve inventory - PRIVATE METHOD FIX
     */
    protected function reserveInventory(Product|ProductVariant $item, int $quantity, Order $order, string $notes): void
    {
        InventoryTransaction::recordTransaction(
            $item,
            'reservation',
            -$quantity,
            $order,
            $order->order_number,
            $notes
        );
    }

    /**
     * Release reserved inventory - PRIVATE METHOD FIX
     */
    protected function releaseInventory(Product|ProductVariant $item, int $quantity, Order $order, string $notes): void
    {
        InventoryTransaction::recordTransaction(
            $item,
            'release',
            $quantity,
            $order,
            $order->order_number,
            $notes
        );
    }

    /**
     * Manual inventory adjustment
     */
    public function adjustInventory(Product|ProductVariant $item, int $newQuantity, string $reason): void
    {
        $currentQuantity = $item->inventory_quantity;
        $adjustment = $newQuantity - $currentQuantity;

        if ($adjustment !== 0) {
            InventoryTransaction::recordTransaction(
                $item,
                'adjustment',
                $adjustment,
                null,
                'Manual adjustment',
                $reason
            );
        }
    }

    /**
     * Restock inventory
     */
    public function restockInventory(Product|ProductVariant $item, int $quantity, ?string $reference = null): void
    {
        InventoryTransaction::recordTransaction(
            $item,
            'restock',
            $quantity,
            null,
            $reference,
            'Inventory restocked'
        );
    }

    /**
     * Get inventory history for an item
     */
    public function getInventoryHistory(Product|ProductVariant $item, int $limit = 50): \Illuminate\Support\Collection
    {
        $query = InventoryTransaction::with(['order'])
            ->where($item instanceof Product ? 'product_id' : 'product_variant_id', $item->id)
            ->orderBy('created_at', 'desc')
            ->limit($limit);

        return $query->get();
    }

    /**
     * Check if sufficient stock is available
     */
    public function checkStockAvailability(Product|ProductVariant $item, int $requestedQuantity): bool
    {
        // For products, check if they track inventory
        if ($item instanceof Product) {
            if (! $item->track_inventory) {
                return true;
            }
        } else {
            // For variants, check if the parent product tracks inventory
            if (! $item->product->track_inventory) {
                return true;
            }
        }

        return $item->inventory_quantity >= $requestedQuantity;
    }
}
</file>

<file path="app/Services/OrderService.php">
<?php

// app/Services/OrderService.php

namespace App\Services;

use App\Models\Customer\Customer;
use App\Models\Order\Order;
use App\Models\Order\OrderItem;
use App\Models\Product\Product;
use App\Models\User;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class OrderService
{
    public function __construct(
        protected InventoryService $inventoryService,
        protected PaymentService $paymentService
    ) {}

    /**
     * Create a new order from cart data - Updated to handle proper cart structure
     */
    public function createOrder(
        Customer $customer,
        Collection $cartItems,
        array $billingAddress,
        array $shippingAddress,
        array $orderData = []
    ): Order {
        return DB::transaction(function () use ($customer, $cartItems, $billingAddress, $shippingAddress, $orderData) {
            Log::info('Creating order', [
                'customer_id' => $customer->id,
                'cart_items_count' => $cartItems->count(),
                'billing_address' => $billingAddress,
                'shipping_address' => $shippingAddress,
                'order_data' => $orderData,
            ]);

            // Calculate totals
            $totals = $this->calculateOrderTotals($cartItems, $orderData);

            // Create the order
            $order = Order::create([
                'customer_id' => $customer->id,
                'vendor_id' => $orderData['vendor_id'] ?? null,
                'status' => 'pending_payment',
                'subtotal_amount' => $totals['subtotal_amount'],
                'tax_amount' => $totals['tax_amount'],
                'shipping_amount' => $totals['shipping_amount'],
                'discount_amount' => $totals['discount_amount'],
                'total_amount' => $totals['total_amount'],
                'currency' => $orderData['currency'] ?? 'GBP',
                'tax_rate' => $orderData['tax_rate'] ?? 0.20,
                'tax_inclusive' => $orderData['tax_inclusive'] ?? true,
                'customer_details' => [
                    'first_name' => $customer->first_name,
                    'last_name' => $customer->last_name,
                    'email' => $customer->email,
                    'phone' => $customer->phone,
                ],
                'billing_address' => $billingAddress,
                'shipping_address' => $shippingAddress,
                'customer_notes' => $orderData['customer_notes'] ?? null,
                'metadata' => $orderData['metadata'] ?? [],
            ]);

            Log::info('Order created', ['order_id' => $order->id, 'order_number' => $order->order_number]);

            // Create order items with proper validation
            foreach ($cartItems as $cartItem) {
                $this->createOrderItemFromCart($cartItem, $order);
            }

            // FIXED: Load relationships before reserving inventory
            $order->load(['items.product', 'items.productVariant']);

            // Reserve inventory
            $this->inventoryService->reserveInventoryForOrder($order);

            return $order;
        });
    }

    /**
     * Create an order item from cart data with proper validation - UPDATED
     */
    protected function createOrderItemFromCart(array $cartItem, Order $order): void
    {
        Log::info('Creating order item from cart', ['cart_item' => $cartItem, 'order_id' => $order->id]);

        // Validate required fields
        if (! isset($cartItem['product_id']) || ! $cartItem['product_id']) {
            throw new \InvalidArgumentException('Cart item missing product_id');
        }

        if (! isset($cartItem['quantity']) || $cartItem['quantity'] <= 0) {
            throw new \InvalidArgumentException('Cart item missing or invalid quantity');
        }

        // Load the actual product/variant to get current data
        $product = Product::with(['variants.attributeValues.attribute'])->find($cartItem['product_id']);

        if (! $product) {
            throw new \InvalidArgumentException("Product {$cartItem['product_id']} not found when creating order");
        }

        $variant = null;
        $item = $product; // Default to product for pricing

        // FIXED: Better variant handling
        // If there's a variant_id in cart AND it's not null AND the product has variants
        if (isset($cartItem['variant_id']) && $cartItem['variant_id'] && $product->hasVariants()) {
            $variant = $product->variants->firstWhere('id', $cartItem['variant_id']);
            if (! $variant) {
                throw new \InvalidArgumentException("Variant {$cartItem['variant_id']} not found when creating order");
            }
            $item = $variant; // Use variant for pricing
        } elseif ($product->hasVariants() && (! isset($cartItem['variant_id']) || ! $cartItem['variant_id'])) {
            // Product has variants but no variant selected - this shouldn't happen after cart validation
            throw new \InvalidArgumentException("Product {$product->name} requires a variant selection");
        }
        // If product doesn't have variants, we use the product itself (simple product)

        // Prepare variant attributes for storage
        $variantAttributes = null;
        if ($variant && $variant->attributeValues) {
            $variantAttributes = $variant->attributeValues->mapWithKeys(function ($attributeValue) {
                return [$attributeValue->attribute->name => $attributeValue->display_label];
            })->toArray();
        }

        $orderItem = OrderItem::create([
            'order_id' => $order->id,
            'product_id' => $product->id,
            'product_variant_id' => $variant?->id,
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'product_description' => $product->short_description,
            'variant_name' => $variant?->getDisplayName(),
            'variant_sku' => $variant?->sku,
            'variant_attributes' => $variantAttributes,
            'unit_price' => (int) ($item->price * 100), // Convert to pence
            'unit_cost' => $item->cost_price ? (int) ($item->cost_price * 100) : null,
            'compare_price' => $item->compare_price ? (int) ($item->compare_price * 100) : null,
            'quantity' => $cartItem['quantity'],
            'line_total' => (int) ($item->price * $cartItem['quantity'] * 100),
            'tax_amount' => $order->tax_inclusive ?
                (int) ($item->price * $cartItem['quantity'] * 100 * $order->tax_rate / (1 + $order->tax_rate)) :
                (int) ($item->price * $cartItem['quantity'] * 100 * $order->tax_rate),
            'product_image' => $item->image ?? $product->image,
        ]);

        Log::info('Order item created', [
            'order_item_id' => $orderItem->id,
            'product_id' => $product->id,
            'variant_id' => $variant?->id,
            'is_simple_product' => ! $product->hasVariants(),
            'quantity' => $cartItem['quantity'],
            'unit_price' => $orderItem->unit_price,
            'line_total' => $orderItem->line_total,
        ]);
    }

    /**
     * Calculate order totals from cart items
     */
    protected function calculateOrderTotals(Collection $cartItems, array $orderData = []): array
    {
        $subtotalAmount = 0;
        $taxRate = $orderData['tax_rate'] ?? 0.20;
        $taxInclusive = $orderData['tax_inclusive'] ?? true;
        $shippingAmount = ($orderData['shipping_amount'] ?? 0) * 100; // Convert to pence
        $discountAmount = ($orderData['discount_amount'] ?? 0) * 100; // Convert to pence

        foreach ($cartItems as $item) {
            // Validate item has required fields
            if (! isset($item['price']) || ! isset($item['quantity'])) {
                throw new \InvalidArgumentException('Cart item missing price or quantity');
            }

            $lineTotal = $item['price'] * $item['quantity'];
            $subtotalAmount += $lineTotal * 100; // Convert to pence
        }

        // Calculate tax
        if ($taxInclusive) {
            // Tax is already included in prices
            $taxAmount = (int) ($subtotalAmount * $taxRate / (1 + $taxRate));
        } else {
            // Tax needs to be added
            $taxAmount = (int) ($subtotalAmount * $taxRate);
        }

        $totalAmount = $subtotalAmount + $shippingAmount - $discountAmount;
        if (! $taxInclusive) {
            $totalAmount += $taxAmount;
        }

        $totals = [
            'subtotal_amount' => $subtotalAmount,
            'tax_amount' => $taxAmount,
            'shipping_amount' => $shippingAmount,
            'discount_amount' => $discountAmount,
            'total_amount' => $totalAmount,
        ];

        Log::info('Order totals calculated', $totals);

        return $totals;
    }

    /**
     * Update order status with proper validation and history tracking
     */
    public function updateOrderStatus(Order $order, string $newStatus, ?string $notes = null, ?User $user = null): bool
    {
        if (! $order->canTransitionTo($newStatus)) {
            throw new \InvalidArgumentException("Cannot transition order {$order->order_number} from {$order->status} to {$newStatus}");
        }

        $updated = $order->updateStatus($newStatus, $notes, $user);

        if ($updated) {
            // Handle status-specific actions
            match ($newStatus) {
                'processing' => $this->handleProcessingStatus($order),
                'fulfilled' => $this->handleFulfilledStatus($order),
                'cancelled' => $this->handleCancelledStatus($order),
                'completed' => $this->handleCompletedStatus($order),
                default => null,
            };

            // TODO: Dispatch events for notifications
            // event(new OrderStatusUpdated($order, $newStatus));
        }

        return $updated;
    }

    /**
     * Cancel an order and handle inventory/payment
     */
    public function cancelOrder(Order $order, ?string $reason = null, ?User $user = null): bool
    {
        if (! $order->canBeCancelled()) {
            throw new \InvalidArgumentException("Order {$order->order_number} cannot be cancelled in its current state");
        }

        return DB::transaction(function () use ($order, $reason, $user) {
            // Release reserved inventory
            $this->inventoryService->releaseReservedInventory($order);

            // Handle payment cancellation if needed
            if ($order->isPaid()) {
                // TODO: Handle refund logic
                $this->paymentService->refundPayment($order->stripe_payment_intent_id, $order->total_amount);
            }

            // Update order status
            return $this->updateOrderStatus($order, 'cancelled', $reason, $user);
        });
    }

    /**
     * Mark order items as fulfilled
     */
    public function fulfillOrderItems(Order $order, array $fulfillmentData, ?User $user = null): bool
    {
        return DB::transaction(function () use ($order, $fulfillmentData, $user) {
            $allFulfilled = true;

            foreach ($fulfillmentData as $itemId => $data) {
                $orderItem = $order->items()->find($itemId);
                if (! $orderItem || ! $orderItem->canBeFulfilled()) {
                    continue;
                }

                $quantityToFulfill = min($data['quantity'], $orderItem->getQuantityPending());

                // Update order item
                $orderItem->update([
                    'quantity_fulfilled' => $orderItem->quantity_fulfilled + $quantityToFulfill,
                    'fulfillment_details' => array_merge(
                        $orderItem->fulfillment_details ?? [],
                        $data['details'] ?? []
                    ),
                    'fulfilled_at' => $orderItem->quantity_fulfilled + $quantityToFulfill >= $orderItem->quantity ? now() : $orderItem->fulfilled_at,
                ]);

                // Record inventory transaction
                $item = $orderItem->productVariant ?: $orderItem->product;
                $this->inventoryService->recordSale($item, $quantityToFulfill, $order);

                if ($orderItem->getQuantityPending() > 0) {
                    $allFulfilled = false;
                }
            }

            // Update order status based on fulfillment
            if ($allFulfilled) {
                $this->updateOrderStatus($order, 'fulfilled', 'All items fulfilled', $user);
            } elseif ($order->getTotalFulfilledItems() > 0) {
                $this->updateOrderStatus($order, 'partially_fulfilled', 'Partial fulfillment completed', $user);
            }

            return true;
        });
    }

    /**
     * Complete an order
     */
    public function completeOrder(Order $order, ?User $user = null): bool
    {
        if (! $order->isFullyFulfilled()) {
            throw new \InvalidArgumentException("Order {$order->order_number} must be fully fulfilled before completion");
        }

        return $this->updateOrderStatus($order, 'completed', 'Order completed', $user);
    }

    /**
     * Get orders for a customer with filtering
     */
    public function getCustomerOrders(Customer $customer, array $filters = []): Collection
    {
        $query = $customer->orders()->with(['items.product', 'items.productVariant']);

        if (isset($filters['status'])) {
            $query->where('status', $filters['status']);
        }

        if (isset($filters['date_from'])) {
            $query->where('created_at', '>=', $filters['date_from']);
        }

        if (isset($filters['date_to'])) {
            $query->where('created_at', '<=', $filters['date_to']);
        }

        return $query->orderBy('created_at', 'desc')->get();
    }

    // Protected helper methods for status handling
    protected function handleProcessingStatus(Order $order): void
    {
        // Order is now being processed, inventory should already be reserved
        // TODO: Send processing notification to customer
        Log::info('Order processing status handled', ['order_id' => $order->id]);
    }

    protected function handleFulfilledStatus(Order $order): void
    {
        // TODO: Send shipping notification to customer
        // TODO: Generate shipping labels if needed
        Log::info('Order fulfilled status handled', ['order_id' => $order->id]);
    }

    protected function handleCancelledStatus(Order $order): void
    {
        // TODO: Send cancellation notification to customer
        Log::info('Order cancelled status handled', ['order_id' => $order->id]);
    }

    protected function handleCompletedStatus(Order $order): void
    {
        // TODO: Send completion notification to customer
        // TODO: Request review/feedback
        Log::info('Order completed status handled', ['order_id' => $order->id]);
    }
}
</file>

<file path="app/Services/PaymentService.php">
<?php

// app/Services/PaymentService.php

namespace App\Services;

use App\Models\Customer\Customer;
use App\Models\Order\Order;
use App\Models\Payment\Payment;
use Illuminate\Support\Facades\Log;
use Stripe\Exception\ApiErrorException;
use Stripe\StripeClient;

class PaymentService
{
    protected StripeClient $stripe;

    public function __construct()
    {
        $this->stripe = new StripeClient(config('services.stripe.secret'));
    }

    /**
     * Create a Stripe Payment Intent for an order
     */
    public function createPaymentIntent(Order $order, Customer $customer): array
    {
        try {
            // Ensure customer has a Stripe customer ID
            $stripeCustomerId = $this->getOrCreateStripeCustomer($customer);

            $paymentIntentData = [
                'amount' => $order->total_amount, // Amount in pence
                'currency' => strtolower($order->currency),
                'customer' => $stripeCustomerId,
                'metadata' => [
                    'order_id' => $order->id,
                    'order_number' => $order->order_number,
                    'customer_id' => $customer->id,
                    'customer_email' => $customer->email,
                ],
                'description' => "Order {$order->order_number}",
                'receipt_email' => $customer->email,
                'shipping' => [
                    'name' => $order->shipping_address['first_name'].' '.$order->shipping_address['last_name'],
                    'address' => [
                        'line1' => $order->shipping_address['address_line_1'],
                        'line2' => $order->shipping_address['address_line_2'] ?? null,
                        'city' => $order->shipping_address['city'],
                        'state' => $order->shipping_address['state_county'],
                        'postal_code' => $order->shipping_address['postal_code'],
                        'country' => $order->shipping_address['country'],
                    ],
                ],
                'automatic_payment_methods' => [
                    'enabled' => true,
                ],
            ];

            $paymentIntent = $this->stripe->paymentIntents->create($paymentIntentData);

            // Update order with Stripe Payment Intent ID
            $order->update([
                'stripe_payment_intent_id' => $paymentIntent->id,
                'payment_status' => $paymentIntent->status,
            ]);

            // Create payment record
            Payment::create([
                'order_id' => $order->id,
                'stripe_payment_intent_id' => $paymentIntent->id,
                'stripe_customer_id' => $stripeCustomerId,
                'type' => 'payment',
                'status' => $paymentIntent->status,
                'amount' => $paymentIntent->amount,
                'currency' => strtoupper($paymentIntent->currency),
                'stripe_data' => $paymentIntent->toArray(),
            ]);

            return $paymentIntent->toArray();

        } catch (ApiErrorException $e) {
            Log::error('Stripe Payment Intent creation failed', [
                'order_id' => $order->id,
                'error' => $e->getMessage(),
            ]);
            throw new \Exception('Failed to create payment intent: '.$e->getMessage());
        }
    }

    /**
     * Confirm a payment intent (if needed)
     */
    public function confirmPaymentIntent(string $paymentIntentId, ?string $paymentMethodId = null): array
    {
        try {
            $confirmData = [];

            if ($paymentMethodId) {
                $confirmData['payment_method'] = $paymentMethodId;
            }

            $paymentIntent = $this->stripe->paymentIntents->confirm($paymentIntentId, $confirmData);

            return $paymentIntent->toArray();

        } catch (ApiErrorException $e) {
            Log::error('Stripe Payment Intent confirmation failed', [
                'payment_intent_id' => $paymentIntentId,
                'error' => $e->getMessage(),
            ]);
            throw new \Exception('Failed to confirm payment: '.$e->getMessage());
        }
    }

    /**
     * Retrieve a payment intent from Stripe
     */
    public function retrievePaymentIntent(string $paymentIntentId): array
    {
        try {
            $paymentIntent = $this->stripe->paymentIntents->retrieve($paymentIntentId);

            return $paymentIntent->toArray();
        } catch (ApiErrorException $e) {
            Log::error('Failed to retrieve Payment Intent', [
                'payment_intent_id' => $paymentIntentId,
                'error' => $e->getMessage(),
            ]);
            throw new \Exception('Failed to retrieve payment: '.$e->getMessage());
        }
    }

    /**
     * Cancel a payment intent
     */
    public function cancelPaymentIntent(string $paymentIntentId): array
    {
        try {
            $paymentIntent = $this->stripe->paymentIntents->cancel($paymentIntentId);

            // Update local payment record
            $payment = Payment::where('stripe_payment_intent_id', $paymentIntentId)->first();
            if ($payment) {
                $payment->update([
                    'status' => $paymentIntent->status,
                    'stripe_data' => $paymentIntent->toArray(),
                ]);
            }

            return $paymentIntent->toArray();

        } catch (ApiErrorException $e) {
            Log::error('Failed to cancel Payment Intent', [
                'payment_intent_id' => $paymentIntentId,
                'error' => $e->getMessage(),
            ]);
            throw new \Exception('Failed to cancel payment: '.$e->getMessage());
        }
    }

    /**
     * Create a refund for a payment
     */
    public function refundPayment(string $paymentIntentId, ?int $amount = null, string $reason = 'requested_by_customer'): array
    {
        try {
            $refundData = [
                'payment_intent' => $paymentIntentId,
                'reason' => $reason,
            ];

            if ($amount) {
                $refundData['amount'] = $amount;
            }

            $refund = $this->stripe->refunds->create($refundData);

            // Create refund payment record
            $order = Order::where('stripe_payment_intent_id', $paymentIntentId)->first();
            if ($order) {
                Payment::create([
                    'order_id' => $order->id,
                    'stripe_payment_intent_id' => $paymentIntentId,
                    'type' => 'refund',
                    'status' => 'succeeded',
                    'amount' => -$refund->amount, // Negative for refund
                    'currency' => strtoupper($refund->currency),
                    'stripe_data' => $refund->toArray(),
                    'processed_at' => now(),
                ]);
            }

            return $refund->toArray();

        } catch (ApiErrorException $e) {
            Log::error('Failed to create refund', [
                'payment_intent_id' => $paymentIntentId,
                'amount' => $amount,
                'error' => $e->getMessage(),
            ]);
            throw new \Exception('Failed to process refund: '.$e->getMessage());
        }
    }

    /**
     * Get or create a Stripe customer
     */
    public function getOrCreateStripeCustomer(Customer $customer): string
    {
        if ($customer->stripe_customer_id) {
            // Verify the customer still exists in Stripe
            try {
                $this->stripe->customers->retrieve($customer->stripe_customer_id);

                return $customer->stripe_customer_id;
            } catch (ApiErrorException $e) {
                // Customer doesn't exist, create a new one
                Log::warning('Stripe customer not found, creating new one', [
                    'customer_id' => $customer->id,
                    'stripe_customer_id' => $customer->stripe_customer_id,
                ]);
            }
        }

        // Create new Stripe customer
        try {
            $stripeCustomer = $this->stripe->customers->create([
                'email' => $customer->email,
                'name' => $customer->full_name,
                'phone' => $customer->phone,
                'metadata' => [
                    'customer_id' => $customer->id,
                ],
            ]);

            // Update customer with Stripe ID
            $customer->update(['stripe_customer_id' => $stripeCustomer->id]);

            return $stripeCustomer->id;

        } catch (ApiErrorException $e) {
            Log::error('Failed to create Stripe customer', [
                'customer_id' => $customer->id,
                'error' => $e->getMessage(),
            ]);
            throw new \Exception('Failed to create payment customer: '.$e->getMessage());
        }
    }

    /**
     * Handle Stripe webhook events
     */
    public function handleWebhook(array $event): void
    {
        Log::info('Processing Stripe webhook', ['event_type' => $event['type']]);

        try {
            match ($event['type']) {
                'payment_intent.succeeded' => $this->handlePaymentSucceeded($event['data']['object']),
                'payment_intent.payment_failed' => $this->handlePaymentFailed($event['data']['object']),
                'payment_intent.requires_action' => $this->handlePaymentRequiresAction($event['data']['object']),
                'payment_intent.canceled' => $this->handlePaymentCanceled($event['data']['object']),
                'charge.dispute.created' => $this->handleChargeDispute($event['data']['object']),
                default => Log::info('Unhandled webhook event type: '.$event['type']),
            };
        } catch (\Exception $e) {
            Log::error('Error processing webhook', [
                'event_type' => $event['type'],
                'error' => $e->getMessage(),
            ]);
        }
    }

    /**
     * Handle successful payment
     */
    protected function handlePaymentSucceeded(array $paymentIntent): void
    {
        $order = Order::where('stripe_payment_intent_id', $paymentIntent['id'])->first();

        if (! $order) {
            Log::warning('Order not found for successful payment', ['payment_intent_id' => $paymentIntent['id']]);

            return;
        }

        // Update order payment status
        $order->update([
            'payment_status' => 'succeeded',
            'payment_confirmed_at' => now(),
        ]);

        // Update payment record
        $payment = $order->payments()->where('stripe_payment_intent_id', $paymentIntent['id'])->first();
        if ($payment) {
            $payment->update([
                'status' => 'succeeded',
                'amount_received' => $paymentIntent['amount_received'],
                'payment_method_type' => $paymentIntent['charges']['data'][0]['payment_method_details']['type'] ?? null,
                'payment_method_details' => $this->extractPaymentMethodDetails($paymentIntent),
                'stripe_data' => $paymentIntent,
                'processed_at' => now(),
            ]);
        }

        // Transition order to processing
        app(OrderService::class)->updateOrderStatus($order, 'processing', 'Payment confirmed');

        Log::info('Payment succeeded', ['order_id' => $order->id, 'order_number' => $order->order_number]);
    }

    /**
     * Handle failed payment
     */
    protected function handlePaymentFailed(array $paymentIntent): void
    {
        $order = Order::where('stripe_payment_intent_id', $paymentIntent['id'])->first();

        if (! $order) {
            Log::warning('Order not found for failed payment', ['payment_intent_id' => $paymentIntent['id']]);

            return;
        }

        // Update order payment status
        $order->update(['payment_status' => 'failed']);

        // Update payment record
        $payment = $order->payments()->where('stripe_payment_intent_id', $paymentIntent['id'])->first();
        if ($payment) {
            $payment->update([
                'status' => 'failed',
                'failure_reason' => $paymentIntent['last_payment_error']['code'] ?? 'unknown',
                'failure_message' => $paymentIntent['last_payment_error']['message'] ?? 'Payment failed',
                'stripe_data' => $paymentIntent,
            ]);
        }

        // Update order status
        app(OrderService::class)->updateOrderStatus($order, 'payment_failed', 'Payment failed');

        Log::info('Payment failed', [
            'order_id' => $order->id,
            'order_number' => $order->order_number,
            'failure_reason' => $paymentIntent['last_payment_error']['code'] ?? 'unknown',
        ]);
    }

    /**
     * Handle payment requiring action
     */
    protected function handlePaymentRequiresAction(array $paymentIntent): void
    {
        $order = Order::where('stripe_payment_intent_id', $paymentIntent['id'])->first();

        if (! $order) {
            return;
        }

        $order->update(['payment_status' => 'requires_action']);

        $payment = $order->payments()->where('stripe_payment_intent_id', $paymentIntent['id'])->first();
        if ($payment) {
            $payment->update([
                'status' => 'requires_action',
                'stripe_data' => $paymentIntent,
            ]);
        }

        Log::info('Payment requires action', ['order_id' => $order->id]);
    }

    /**
     * Handle canceled payment
     */
    protected function handlePaymentCanceled(array $paymentIntent): void
    {
        $order = Order::where('stripe_payment_intent_id', $paymentIntent['id'])->first();

        if (! $order) {
            return;
        }

        $order->update(['payment_status' => 'cancelled']);

        $payment = $order->payments()->where('stripe_payment_intent_id', $paymentIntent['id'])->first();
        if ($payment) {
            $payment->update([
                'status' => 'cancelled',
                'stripe_data' => $paymentIntent,
            ]);
        }

        // Cancel the order
        app(OrderService::class)->cancelOrder($order, 'Payment canceled');

        Log::info('Payment canceled', ['order_id' => $order->id]);
    }

    /**
     * Handle charge dispute
     */
    protected function handleChargeDispute(array $dispute): void
    {
        // Find the order associated with this charge
        $chargeId = $dispute['charge'];

        // TODO: Implement dispute handling logic
        // This might involve notifying admins, updating order status, etc.

        Log::warning('Charge dispute created', [
            'dispute_id' => $dispute['id'],
            'charge_id' => $chargeId,
            'amount' => $dispute['amount'],
            'reason' => $dispute['reason'],
        ]);
    }

    /**
     * Extract payment method details for storage
     */
    protected function extractPaymentMethodDetails(array $paymentIntent): ?array
    {
        $charges = $paymentIntent['charges']['data'] ?? [];
        if (empty($charges)) {
            return null;
        }

        $paymentMethodDetails = $charges[0]['payment_method_details'] ?? [];

        if (isset($paymentMethodDetails['card'])) {
            return [
                'type' => 'card',
                'brand' => $paymentMethodDetails['card']['brand'],
                'last4' => $paymentMethodDetails['card']['last4'],
                'exp_month' => $paymentMethodDetails['card']['exp_month'],
                'exp_year' => $paymentMethodDetails['card']['exp_year'],
                'country' => $paymentMethodDetails['card']['country'] ?? null,
            ];
        }

        return ['type' => $paymentMethodDetails['type'] ?? 'unknown'];
    }

    /**
     * Verify webhook signature
     */
    public function verifyWebhookSignature(string $payload, string $signature): bool
    {
        $webhookSecret = config('services.stripe.webhook_secret');

        if (! $webhookSecret) {
            Log::warning('Stripe webhook secret not configured');

            return false;
        }

        try {
            \Stripe\Webhook::constructEvent($payload, $signature, $webhookSecret);

            return true;
        } catch (\Exception $e) {
            Log::error('Webhook signature verification failed', ['error' => $e->getMessage()]);

            return false;
        }
    }

    /**
     * Get saved payment methods for a customer
     */
    public function getCustomerPaymentMethods(Customer $customer): array
    {
        if (! $customer->stripe_customer_id) {
            return [];
        }

        try {
            $paymentMethods = $this->stripe->paymentMethods->all([
                'customer' => $customer->stripe_customer_id,
                'type' => 'card',
            ]);

            return $paymentMethods->data;
        } catch (ApiErrorException $e) {
            Log::error('Failed to retrieve customer payment methods', [
                'customer_id' => $customer->id,
                'error' => $e->getMessage(),
            ]);

            return [];
        }
    }

    /**
     * Save a payment method for future use
     */
    public function savePaymentMethod(Customer $customer, string $paymentMethodId): bool
    {
        $stripeCustomerId = $this->getOrCreateStripeCustomer($customer);

        try {
            $this->stripe->paymentMethods->attach($paymentMethodId, [
                'customer' => $stripeCustomerId,
            ]);

            return true;
        } catch (ApiErrorException $e) {
            Log::error('Failed to save payment method', [
                'customer_id' => $customer->id,
                'payment_method_id' => $paymentMethodId,
                'error' => $e->getMessage(),
            ]);

            return false;
        }
    }
}
</file>

<file path="database/seeders/CategorySeeder.php">
<?php

namespace Database\Seeders;

use App\Models\Product\Category;
use Illuminate\Database\Seeder;

class CategorySeeder extends Seeder
{
    public function run()
    {
        $categories = [
            [
                'name' => 'Electronics',
                'description' => 'Electronic devices and accessories',
                'children' => [
                    ['name' => 'Smartphones', 'description' => 'Mobile phones and accessories'],
                    ['name' => 'Laptops', 'description' => 'Computers and laptops'],
                    ['name' => 'Accessories', 'description' => 'Electronic accessories'],
                ],
            ],
            [
                'name' => 'Clothing',
                'description' => 'Fashion and apparel',
                'children' => [
                    ['name' => 'Men\'s Clothing', 'description' => 'Clothing for men'],
                    ['name' => 'Women\'s Clothing', 'description' => 'Clothing for women'],
                    ['name' => 'Accessories', 'description' => 'Fashion accessories'],
                ],
            ],
        ];

        foreach ($categories as $categoryData) {
            $category = Category::create([
                'name' => $categoryData['name'],
                'description' => $categoryData['description'],
                'is_active' => true,
            ]);

            if (isset($categoryData['children'])) {
                foreach ($categoryData['children'] as $childData) {
                    Category::create([
                        'name' => $childData['name'],
                        'description' => $childData['description'],
                        'parent_id' => $category->id,
                        'is_active' => true,
                    ]);
                }
            }
        }
    }
}
</file>

<file path="database/seeders/DatabaseSeeder.php">
<?php

namespace Database\Seeders;

use App\Models\Product\Attribute;
use App\Models\Product\AttributeValue;
use App\Models\Product\Category;
use App\Models\Product\Product;
use App\Models\Product\ProductVariant;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class DatabaseSeeder extends Seeder
{
    public function run()
    {
        // Clear all existing data in the correct order (foreign keys)
        $this->command->info('Clearing existing data...');

        // Disable foreign key checks to avoid constraint issues
        DB::statement('SET FOREIGN_KEY_CHECKS=0;');

        // Clear pivot tables first
        DB::table('product_categories')->truncate();
        DB::table('product_attributes')->truncate();
        DB::table('variant_attribute_values')->truncate();

        // Clear dependent tables
        ProductVariant::truncate();
        AttributeValue::truncate();

        // Clear main tables
        Product::truncate();
        Category::truncate();
        Attribute::truncate();

        // Re-enable foreign key checks
        DB::statement('SET FOREIGN_KEY_CHECKS=1;');

        $this->command->info('Data cleared successfully!');

        // Now seed fresh data
        $this->command->info('Seeding fresh data...');

        $this->call([
            CategorySeeder::class,
            ProductSeeder::class,
        ]);

        $this->command->info('Seeding completed successfully!');
    }
}
</file>

<file path="database/seeders/DefaultVendorSeeder.php">
<?php

// database/seeders/DefaultVendorSeeder.php

namespace Database\Seeders;

use App\Models\User\User;
use App\Models\User\Vendor;
use Illuminate\Database\Seeder;

class DefaultVendorSeeder extends Seeder
{
    public function run()
    {
        // Create default admin user
        $user = User::create([
            'name' => 'Store Owner',
            'email' => 'admin@yourstore.com',
            'password' => bcrypt('password'),
            'type' => 'vendor',
        ]);

        // Create default vendor
        Vendor::create([
            'user_id' => $user->id,
            'business_name' => 'Your Store Name',
            'slug' => 'main-store',
            'description' => 'Main store description',
            'status' => 'approved',
            'commission_rate' => 0.00, // No commission for own store
        ]);
    }
}
</file>

<file path="database/seeders/ProductSeeder.php">
<?php

namespace Database\Seeders;

use App\Models\Product\Attribute;
use App\Models\Product\AttributeValue;
use App\Models\Product\Category;
use App\Models\Product\Product;
use App\Models\Product\ProductVariant;
use Illuminate\Database\Seeder;

class ProductSeeder extends Seeder
{
    public function run()
    {
        // Create attributes first
        $this->createAttributes();

        $categories = Category::all();

        $products = [
            [
                'name' => 'iPhone 15 Pro',
                'description' => 'Latest iPhone with titanium design and A17 Pro chip. Features advanced camera system with 5x optical zoom.',
                'short_description' => 'Latest iPhone with titanium design',
                'sku' => 'IPHONE-15-PRO',
                'price' => 999.00,
                'compare_price' => 1099.00,
                'cost_price' => 650.00,
                'inventory_quantity' => 0, // Will be managed by variants
                'type' => 'variable',
                'status' => 'published',
                'is_featured' => true,
                'published_at' => now(),
                'tags' => ['smartphone', 'apple', 'premium'],
                'category_names' => ['Smartphones', 'Electronics'],
                'variants' => [
                    ['color' => 'Natural Titanium', 'storage' => '128GB', 'price_modifier' => 0],
                    ['color' => 'Natural Titanium', 'storage' => '256GB', 'price_modifier' => 100],
                    ['color' => 'Blue Titanium', 'storage' => '128GB', 'price_modifier' => 0],
                    ['color' => 'Blue Titanium', 'storage' => '256GB', 'price_modifier' => 100],
                    ['color' => 'White Titanium', 'storage' => '128GB', 'price_modifier' => 0],
                    ['color' => 'Black Titanium', 'storage' => '256GB', 'price_modifier' => 100],
                ],
            ],
            [
                'name' => 'MacBook Air M3',
                'description' => 'The incredibly thin and light MacBook Air is more powerful than ever. Featuring the breakthrough M3 chip, up to 18 hours of battery life, and a brilliant Liquid Retina display. Available in multiple configurations to fit your workflow.',
                'short_description' => 'Supercharged by the M3 chip with incredible performance and battery life',
                'sku' => 'MACBOOK-AIR-M3',
                'price' => 1099.00, // Base price for 13" 256GB
                'compare_price' => 1199.00,
                'cost_price' => 800.00,
                'inventory_quantity' => 0, // Managed by variants
                'type' => 'variable',
                'status' => 'published',
                'is_featured' => true,
                'published_at' => now(),
                'tags' => ['laptop', 'apple', 'computer', 'm3', 'macbook'],
                'category_names' => ['Laptops', 'Electronics'],
                'variants' => [
                    // 13-inch models
                    ['screen_size' => '13-inch', 'storage' => '256GB', 'color' => 'Midnight', 'price_modifier' => 0],
                    ['screen_size' => '13-inch', 'storage' => '256GB', 'color' => 'Silver', 'price_modifier' => 0],
                    ['screen_size' => '13-inch', 'storage' => '256GB', 'color' => 'Space Gray', 'price_modifier' => 0],
                    ['screen_size' => '13-inch', 'storage' => '256GB', 'color' => 'Starlight', 'price_modifier' => 0],

                    ['screen_size' => '13-inch', 'storage' => '512GB', 'color' => 'Midnight', 'price_modifier' => 200],
                    ['screen_size' => '13-inch', 'storage' => '512GB', 'color' => 'Silver', 'price_modifier' => 200],
                    ['screen_size' => '13-inch', 'storage' => '512GB', 'color' => 'Space Gray', 'price_modifier' => 200],
                    ['screen_size' => '13-inch', 'storage' => '512GB', 'color' => 'Starlight', 'price_modifier' => 200],

                    ['screen_size' => '13-inch', 'storage' => '1TB', 'color' => 'Midnight', 'price_modifier' => 400],
                    ['screen_size' => '13-inch', 'storage' => '1TB', 'color' => 'Silver', 'price_modifier' => 400],
                    ['screen_size' => '13-inch', 'storage' => '1TB', 'color' => 'Space Gray', 'price_modifier' => 400],
                    ['screen_size' => '13-inch', 'storage' => '1TB', 'color' => 'Starlight', 'price_modifier' => 400],

                    ['screen_size' => '13-inch', 'storage' => '2TB', 'color' => 'Midnight', 'price_modifier' => 800],
                    ['screen_size' => '13-inch', 'storage' => '2TB', 'color' => 'Silver', 'price_modifier' => 800],
                    ['screen_size' => '13-inch', 'storage' => '2TB', 'color' => 'Space Gray', 'price_modifier' => 800],

                    // 15-inch models (higher base price)
                    ['screen_size' => '15-inch', 'storage' => '256GB', 'color' => 'Midnight', 'price_modifier' => 200],
                    ['screen_size' => '15-inch', 'storage' => '256GB', 'color' => 'Silver', 'price_modifier' => 200],
                    ['screen_size' => '15-inch', 'storage' => '256GB', 'color' => 'Space Gray', 'price_modifier' => 200],
                    ['screen_size' => '15-inch', 'storage' => '256GB', 'color' => 'Starlight', 'price_modifier' => 200],

                    ['screen_size' => '15-inch', 'storage' => '512GB', 'color' => 'Midnight', 'price_modifier' => 400],
                    ['screen_size' => '15-inch', 'storage' => '512GB', 'color' => 'Silver', 'price_modifier' => 400],
                    ['screen_size' => '15-inch', 'storage' => '512GB', 'color' => 'Space Gray', 'price_modifier' => 400],
                    ['screen_size' => '15-inch', 'storage' => '512GB', 'color' => 'Starlight', 'price_modifier' => 400],

                    ['screen_size' => '15-inch', 'storage' => '1TB', 'color' => 'Midnight', 'price_modifier' => 600],
                    ['screen_size' => '15-inch', 'storage' => '1TB', 'color' => 'Silver', 'price_modifier' => 600],
                    ['screen_size' => '15-inch', 'storage' => '1TB', 'color' => 'Space Gray', 'price_modifier' => 600],
                    ['screen_size' => '15-inch', 'storage' => '1TB', 'color' => 'Starlight', 'price_modifier' => 600],

                    ['screen_size' => '15-inch', 'storage' => '2TB', 'color' => 'Midnight', 'price_modifier' => 1000],
                    ['screen_size' => '15-inch', 'storage' => '2TB', 'color' => 'Silver', 'price_modifier' => 1000],
                    ['screen_size' => '15-inch', 'storage' => '2TB', 'color' => 'Space Gray', 'price_modifier' => 1000],
                ],
            ],
            [
                'name' => 'Classic Cotton T-Shirt',
                'description' => 'Premium cotton t-shirt available in multiple colors and sizes. Perfect for everyday wear with comfortable fit.',
                'short_description' => 'Premium cotton t-shirt',
                'sku' => 'TSHIRT-COTTON-CLASSIC',
                'price' => 29.99,
                'compare_price' => 39.99,
                'cost_price' => 12.00,
                'inventory_quantity' => 0, // Will be managed by variants
                'type' => 'variable',
                'status' => 'published',
                'is_featured' => false,
                'published_at' => now(),
                'tags' => ['clothing', 'cotton', 'basic'],
                'category_names' => ['Men\'s Clothing', 'Clothing'],
                'variants' => [
                    ['color' => 'White', 'size' => 'S', 'price_modifier' => 0],
                    ['color' => 'White', 'size' => 'M', 'price_modifier' => 0],
                    ['color' => 'White', 'size' => 'L', 'price_modifier' => 0],
                    ['color' => 'White', 'size' => 'XL', 'price_modifier' => 2],
                    ['color' => 'Black', 'size' => 'S', 'price_modifier' => 0],
                    ['color' => 'Black', 'size' => 'M', 'price_modifier' => 0],
                    ['color' => 'Black', 'size' => 'L', 'price_modifier' => 0],
                    ['color' => 'Navy', 'size' => 'M', 'price_modifier' => 0],
                    ['color' => 'Navy', 'size' => 'L', 'price_modifier' => 0],
                ],
            ],
            [
                'name' => 'Wireless Earbuds Pro',
                'description' => 'Active noise cancellation, transparency mode, and spatial audio. Up to 6 hours of listening time.',
                'short_description' => 'Premium wireless earbuds',
                'sku' => 'EARBUDS-WIRELESS-PRO',
                'price' => 179.99,
                'compare_price' => 199.99,
                'cost_price' => 80.00,
                'inventory_quantity' => 75, // Simple product
                'type' => 'simple',
                'status' => 'published',
                'is_featured' => true,
                'published_at' => now(),
                'tags' => ['audio', 'wireless', 'premium'],
                'category_names' => ['Accessories', 'Electronics'],
            ],
            [
                'name' => 'Designer Sneakers',
                'description' => 'Premium leather sneakers with comfortable cushioning. Available in multiple colors and sizes.',
                'short_description' => 'Premium leather sneakers',
                'sku' => 'SNEAKERS-DESIGNER',
                'price' => 159.99,
                'compare_price' => 199.99,
                'cost_price' => 70.00,
                'inventory_quantity' => 0,
                'type' => 'variable',
                'status' => 'published',
                'is_featured' => true,
                'published_at' => now(),
                'tags' => ['shoes', 'leather', 'fashion'],
                'category_names' => ['Accessories', 'Men\'s Clothing'],
                'variants' => [
                    ['color' => 'White', 'size' => '8', 'price_modifier' => 0],
                    ['color' => 'White', 'size' => '9', 'price_modifier' => 0],
                    ['color' => 'White', 'size' => '10', 'price_modifier' => 0],
                    ['color' => 'White', 'size' => '11', 'price_modifier' => 0],
                    ['color' => 'Black', 'size' => '8', 'price_modifier' => 0],
                    ['color' => 'Black', 'size' => '9', 'price_modifier' => 0],
                    ['color' => 'Black', 'size' => '10', 'price_modifier' => 0],
                    ['color' => 'Navy', 'size' => '9', 'price_modifier' => 0],
                    ['color' => 'Navy', 'size' => '10', 'price_modifier' => 0],
                ],
            ],
        ];

        foreach ($products as $productData) {
            $variants = $productData['variants'] ?? null;
            $categoryNames = $productData['category_names'];
            unset($productData['variants'], $productData['category_names']);

            // Use updateOrCreate to avoid duplicates
            $product = Product::updateOrCreate(
                ['sku' => $productData['sku']], // Find by SKU
                $productData // Update with this data
            );

            // Sync categories (removes old, adds new)
            $categoriesToAttach = $categories->whereIn('name', $categoryNames)->pluck('id');
            $product->categories()->sync($categoriesToAttach);

            // Delete existing variants before creating new ones
            $product->variants()->delete();

            // Create variants if this is a variable product
            if ($variants) {
                $this->createVariants($product, $variants);
            }
        }
    }

    private function createAttributes()
    {
        echo "Creating attributes...\n";

        // Create Screen Size attribute FIRST
        $screenSizeAttribute = Attribute::updateOrCreate(
            ['name' => 'Screen Size'],
            [
                'type' => 'select',
                'display_type' => 'button',
                'is_variant' => true,
                'is_filterable' => true,
                'sort_order' => 0, // Show first
            ]
        );
        echo "Created Screen Size attribute with ID: {$screenSizeAttribute->id}\n";

        $screenSizes = ['13-inch', '15-inch', '16-inch'];
        foreach ($screenSizes as $screenSize) {
            $value = AttributeValue::updateOrCreate(
                [
                    'attribute_id' => $screenSizeAttribute->id,
                    'value' => $screenSize,
                ]
            );
            echo "Created screen size value: {$screenSize} with ID: {$value->id}\n";
        }

        // Create Color attribute
        $colorAttribute = Attribute::updateOrCreate(
            ['name' => 'Color'],
            [
                'type' => 'select',
                'display_type' => 'color_swatch',
                'is_variant' => true,
                'is_filterable' => true,
                'sort_order' => 1,
            ]
        );
        echo "Created Color attribute with ID: {$colorAttribute->id}\n";

        $colors = [
            ['value' => 'White', 'color_code' => '#FFFFFF'],
            ['value' => 'Black', 'color_code' => '#000000'],
            ['value' => 'Navy', 'color_code' => '#001F3F'],
            ['value' => 'Natural Titanium', 'color_code' => '#C0C0C0'],
            ['value' => 'Blue Titanium', 'color_code' => '#4169E1'],
            ['value' => 'White Titanium', 'color_code' => '#F8F8FF'],
            ['value' => 'Black Titanium', 'color_code' => '#2F2F2F'],
            ['value' => 'Midnight', 'color_code' => '#191D26'],
            ['value' => 'Silver', 'color_code' => '#E3E4E6'],
            ['value' => 'Space Gray', 'color_code' => '#7D7E80'],
            ['value' => 'Starlight', 'color_code' => '#F7F4ED'],
        ];

        foreach ($colors as $color) {
            AttributeValue::updateOrCreate(
                [
                    'attribute_id' => $colorAttribute->id,
                    'value' => $color['value'],
                ],
                ['color_code' => $color['color_code']]
            );
        }

        // Create Storage attribute
        $storageAttribute = Attribute::updateOrCreate(
            ['name' => 'Storage'],
            [
                'type' => 'select',
                'display_type' => 'button',
                'is_variant' => true,
                'is_filterable' => true,
                'sort_order' => 2,
            ]
        );
        echo "Created Storage attribute with ID: {$storageAttribute->id}\n";

        $storages = ['128GB', '256GB', '512GB', '1TB', '2TB'];
        foreach ($storages as $storage) {
            AttributeValue::updateOrCreate(
                [
                    'attribute_id' => $storageAttribute->id,
                    'value' => $storage,
                ]
            );
        }

        // Create Size attribute (for clothing)
        $sizeAttribute = Attribute::updateOrCreate(
            ['name' => 'Size'],
            [
                'type' => 'select',
                'display_type' => 'button',
                'is_variant' => true,
                'is_filterable' => true,
                'sort_order' => 3,
            ]
        );

        $sizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL', '7', '8', '9', '10', '11', '12'];
        foreach ($sizes as $size) {
            AttributeValue::updateOrCreate(
                [
                    'attribute_id' => $sizeAttribute->id,
                    'value' => $size,
                ]
            );
        }

        echo "Attributes creation completed!\n";
    }

    private function createVariants(Product $product, array $variantData)
    {
        foreach ($variantData as $index => $variant) {
            $variantPrice = $product->price + ($variant['price_modifier'] ?? 0);

            // Generate SKU
            $skuParts = [$product->sku];
            foreach ($variant as $key => $value) {
                if ($key !== 'price_modifier') {
                    $skuParts[] = strtoupper(str_replace([' ', 'GB', '-inch'], '', $value));
                }
            }
            $sku = implode('-', $skuParts);

            $productVariant = ProductVariant::updateOrCreate(
                ['sku' => $sku],
                [
                    'product_id' => $product->id,
                    'price' => $variantPrice,
                    'compare_price' => $product->compare_price ? $product->compare_price + ($variant['price_modifier'] ?? 0) : null,
                    'cost_price' => $product->cost_price,
                    'inventory_quantity' => rand(5, 25),
                    'position' => $index,
                    'is_active' => true,
                ]
            );

            // Attach attribute values - DEBUG VERSION
            $attributeValueIds = [];
            foreach ($variant as $attributeName => $attributeValue) {
                if ($attributeName === 'price_modifier') {
                    continue;
                }

                // Map variant keys to attribute names
                $searchAttributeName = match ($attributeName) {
                    'screen_size' => 'Screen Size',
                    'color' => 'Color',
                    'storage' => 'Storage',
                    'size' => 'Size',
                    default => ucfirst($attributeName)
                };

                echo "Looking for attribute: {$searchAttributeName} with value: {$attributeValue}\n";

                $attribute = Attribute::where('name', $searchAttributeName)->first();
                if (! $attribute) {
                    echo "ERROR: Attribute '{$searchAttributeName}' not found!\n";

                    continue;
                }

                $attributeValueModel = AttributeValue::where('attribute_id', $attribute->id)
                    ->where('value', $attributeValue)
                    ->first();

                if (! $attributeValueModel) {
                    echo "ERROR: AttributeValue '{$attributeValue}' not found for attribute '{$searchAttributeName}'!\n";

                    continue;
                }

                $attributeValueIds[] = $attributeValueModel->id;
                echo "SUCCESS: Found {$searchAttributeName}: {$attributeValue}\n";
            }

            $productVariant->attributeValues()->sync($attributeValueIds);
        }
    }
}
</file>

<file path="resources/views/frontend/cart/index.blade.php">
{{-- resources/views/frontend/cart/index.blade.php --}}
@extends('layouts.frontend')

@section('title', 'Shopping Cart - ' . config('app.name'))

@section('content')
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-8">Shopping Cart</h1>

        @if ($cart->count() > 0)
            <div class="bg-white rounded-lg shadow-sm border border-gray-300 overflow-hidden">
                <!-- Cart Items -->
                <div class="divide-y divide-gray-200">
                    @foreach ($cart as $key => $item)
                        <div class="p-6 flex items-center space-x-4">
                            <!-- Product Image -->
                            <div class="flex-shrink-0 w-20 h-20 bg-gray-200 rounded-lg overflow-hidden">
                                @if ($item['image'])
                                    <img src="{{ Storage::url($item['image']) }}" alt="{{ $item['name'] }}"
                                        class="w-full h-full object-cover">
                                @else
                                    <div class="w-full h-full flex items-center justify-center">
                                        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor"
                                            viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                            </path>
                                        </svg>
                                    </div>
                                @endif
                            </div>

                            <!-- Product Details -->
                            <div class="flex-1">
                                <h3 class="font-medium text-gray-900">{{ $item['name'] }}</h3>
                                <p class="text-gray-600">${{ number_format($item['price'], 2) }}</p>
                            </div>

                            <!-- Quantity Controls -->
                            <div class="flex items-center space-x-2">
                                <button onclick="updateQuantity('{{ $key }}', {{ $item['quantity'] - 1 }})"
                                    class="w-8 h-8 flex items-center justify-center border border-gray-300 rounded hover:bg-gray-50"
                                    {{ $item['quantity'] <= 1 ? 'disabled' : '' }}>
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4">
                                        </path>
                                    </svg>
                                </button>

                                <span class="w-12 text-center font-medium">{{ $item['quantity'] }}</span>

                                <button onclick="updateQuantity('{{ $key }}', {{ $item['quantity'] + 1 }})"
                                    class="w-8 h-8 flex items-center justify-center border border-gray-300 rounded hover:bg-gray-50">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                    </svg>
                                </button>
                            </div>

                            <!-- Item Total -->
                            <div class="text-right">
                                <p class="font-medium text-gray-900">
                                    ${{ number_format($item['price'] * $item['quantity'], 2) }}</p>
                                <button onclick="removeItem('{{ $key }}')"
                                    class="text-red-600 hover:text-red-700 text-sm mt-1">
                                    Remove
                                </button>
                            </div>
                        </div>
                    @endforeach
                </div>

                <!-- Cart Summary -->
                <div class="bg-gray-50 p-6">
                    <div class="flex justify-between items-center text-lg font-medium text-gray-900 mb-4">
                        <span>Total</span>
                        <span>${{ number_format($total->value, 2) }}</span>
                    </div>

                    <div class="space-y-3">
                        <button class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium">
                            Proceed to Checkout
                        </button>
                        <a href="{{ route('products.index') }}"
                            class="block w-full bg-gray-200 text-gray-800 py-3 rounded-lg hover:bg-gray-300 font-medium text-center">
                            Continue Shopping
                        </a>
                    </div>
                </div>
            </div>
        @else
            <div class="text-center py-12">
                <svg class="mx-auto h-16 w-16 text-gray-400 mb-4" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                    <path
                        d="M34 40h10v-4a6 6 0 00-10.712-3.714M34 40H14m20 0v-4a9.971 9.971 0 00-.712-3.714M14 40H4v-4a6 6 0 0110.713-3.714M14 40v-4c0-1.313.253-2.566.713-3.714m0 0A9.971 9.971 0 0124 24c4.21 0 7.863 2.613 9.288 6.286"
                        stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Your cart is empty</h3>
                <p class="text-gray-600 mb-6">Add some products to get started!</p>
                <a href="{{ route('products.index') }}"
                    class="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 font-medium">
                    Start Shopping
                </a>
            </div>
        @endif
    </div>

    <script>
        function updateQuantity(key, quantity) {
            if (quantity < 1) return;

            fetch(`/cart/${key}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    body: JSON.stringify({
                        quantity: quantity
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload(); // Simple reload for now
                    }
                });
        }

        function removeItem(key) {
            fetch(`/cart/${key}`, {
                    method: 'DELETE',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    }
                });
        }
    </script>
@endsection
</file>

<file path="resources/views/frontend/cart/sidebar.blade.php">
{{-- resources/views/frontend/cart/sidebar.blade.php --}}
<!-- Cart Sidebar -->
<div x-show="cartOpen" x-cloak class="fixed inset-0 z-50 overflow-hidden" @keydown.escape.window="cartOpen = false">
    <!-- Backdrop -->
    <div x-show="cartOpen" x-transition:enter="ease-in-out duration-300" x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100" x-transition:leave="ease-in-out duration-300"
        x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0"
        class="absolute inset-0 bg-gray-500 bg-opacity-75" @click="cartOpen = false"></div>

    <!-- Sidebar -->
    <div class="absolute right-0 top-0 h-full w-full max-w-md">
        <div x-show="cartOpen" x-transition:enter="transform transition ease-in-out duration-300"
            x-transition:enter-start="translate-x-full" x-transition:enter-end="translate-x-0"
            x-transition:leave="transform transition ease-in-out duration-300" x-transition:leave-start="translate-x-0"
            x-transition:leave-end="translate-x-full" class="flex h-full flex-col bg-white shadow-xl">
            <!-- Header -->
            <div class="flex items-center justify-between px-4 py-6 border-b border-gray-300">
                <h2 class="text-lg font-medium text-gray-900">Shopping Cart</h2>
                <button @click="cartOpen = false" class="rounded-md bg-white text-gray-400 hover:text-gray-500">
                    <span class="sr-only">Close</span>
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <!-- Cart Content -->
            <div class="flex-1 overflow-y-auto px-4 py-6">
                @php
                    $cartService = app(\App\Services\CartService::class);
                    $cart = $cartService->getCart();
                    $total = $cartService->getTotal();
                @endphp

                @if ($cart->count() > 0)
                    <div class="space-y-4">
                        @foreach ($cart as $key => $item)
                            <div class="flex items-center space-x-3 py-3 border-b border-gray-100">
                                <!-- Product Image -->
                                <div class="flex-shrink-0 w-12 h-12 bg-gray-200 rounded overflow-hidden">
                                    @if ($item['image'])
                                        <img src="{{ Storage::url($item['image']) }}" alt="{{ $item['name'] }}"
                                            class="w-full h-full object-cover">
                                    @else
                                        <div class="w-full h-full flex items-center justify-center">
                                            <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                                </path>
                                            </svg>
                                        </div>
                                    @endif
                                </div>

                                <!-- Product Details -->
                                <div class="flex-1 min-w-0">
                                    <h4 class="text-sm font-medium text-gray-900 truncate">{{ $item['name'] }}</h4>
                                    <p class="text-sm text-gray-500">Qty: {{ $item['quantity'] }}</p>
                                    <p class="text-sm font-medium text-gray-900">
                                        ${{ number_format($item['price'] * $item['quantity'], 2) }}</p>
                                </div>

                                <!-- Remove Button -->
                                <button onclick="removeFromCartSidebar('{{ $key }}')"
                                    class="text-red-500 hover:text-red-700 p-1">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                        @endforeach
                    </div>
                @else
                    <div class="text-center text-gray-500 py-8">
                        <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none"
                            viewBox="0 0 48 48">
                            <path
                                d="M34 40h10v-4a6 6 0 00-10.712-3.714M34 40H14m20 0v-4a9.971 9.971 0 00-.712-3.714M14 40H4v-4a6 6 0 0110.713-3.714M14 40v-4c0-1.313.253-2.566.713-3.714m0 0A9.971 9.971 0 0124 24c4.21 0 7.863 2.613 9.288 6.286"
                                stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                        <p class="mt-2">Your cart is empty</p>
                        <a href="{{ route('products.index') }}"
                            class="mt-4 inline-block text-blue-600 hover:text-blue-700">
                            Continue Shopping
                        </a>
                    </div>
                @endif
            </div>

            <!-- Footer -->
            @if ($cart->count() > 0)
                <div class="border-t border-gray-200 px-4 py-6">
                    <div class="flex justify-between text-base font-medium text-gray-900 mb-4">
                        <p>Subtotal</p>
                        <p>${{ number_format($total->value, 2) }}</p>
                    </div>
                    <p class="mt-0.5 text-sm text-gray-500">Shipping and taxes calculated at checkout.</p>
                    <div class="mt-6 space-y-3">
                        <a href="{{ route('cart.index') }}"
                            class="block w-full rounded-md bg-gray-600 px-6 py-3 text-center text-base font-medium text-white hover:bg-gray-700">
                            View Cart
                        </a>
                        <button
                            class="block w-full rounded-md bg-blue-600 px-6 py-3 text-center text-base font-medium text-white hover:bg-blue-700">
                            Checkout
                        </button>
                    </div>
                    <div class="mt-6 flex justify-center text-center text-sm text-gray-500">
                        <p>
                            or
                            <button @click="cartOpen = false" class="font-medium text-blue-600 hover:text-blue-500">
                                Continue Shopping<span aria-hidden="true"> →</span>
                            </button>
                        </p>
                    </div>
                </div>
            @endif
        </div>
    </div>
</div>

<script>
    function removeFromCartSidebar(key) {
        fetch(`/cart/${key}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update cart count
                    document.getElementById('cart-count').textContent = data.cart_count;

                    // Reload the page to refresh cart sidebar content
                    location.reload();
                }
            })
            .catch(error => {
                console.error('Error removing item:', error);
            });
    }
</script>
</file>

<file path="resources/views/frontend/checkout/confirmation.blade.php">
{{-- resources/views/frontend/checkout/confirmation.blade.php --}}
@extends('layouts.frontend')

@section('title', 'Order Confirmation - ' . config('app.name'))

@section('content')
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Success Header -->
        <div class="text-center mb-8">
            <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-4">
                <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
            </div>
            <h1 class="text-3xl font-bold text-gray-900 mb-2">Order Confirmed!</h1>
            <p class="text-lg text-gray-600">Thank you for your purchase. Your order has been successfully placed.</p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Order Details -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-lg shadow-sm border border-gray-300 p-6 mb-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Order Details</h2>

                    <div class="grid grid-cols-2 gap-4 text-sm">
                        <div>
                            <p class="text-gray-500">Order Number</p>
                            <p class="font-medium text-gray-900">{{ $order->order_number }}</p>
                        </div>
                        <div>
                            <p class="text-gray-500">Order Date</p>
                            <p class="font-medium text-gray-900">{{ $order->created_at->format('M j, Y') }}</p>
                        </div>
                        <div>
                            <p class="text-gray-500">Total Amount</p>
                            <p class="font-medium text-gray-900">{{ $order->getTotalMoney()->format() }}</p>
                        </div>
                        <div>
                            <p class="text-gray-500">Payment Status</p>
                            <span
                                class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                Paid
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Order Items -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-300 p-6 mb-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Order Items</h2>

                    <div class="space-y-4">
                        @foreach ($order->items as $item)
                            <div class="flex items-center space-x-4 py-4 border-b border-gray-200 last:border-b-0">
                                <div class="flex-shrink-0 w-16 h-16 bg-gray-200 rounded-lg overflow-hidden">
                                    @if ($item->product_image)
                                        <img src="{{ Storage::url($item->product_image) }}"
                                            alt="{{ $item->getDisplayName() }}" class="w-full h-full object-cover">
                                    @else
                                        <div class="w-full h-full flex items-center justify-center">
                                            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                                </path>
                                            </svg>
                                        </div>
                                    @endif
                                </div>

                                <div class="flex-1 min-w-0">
                                    <h3 class="font-medium text-gray-900">{{ $item->getDisplayName() }}</h3>
                                    <p class="text-sm text-gray-500">SKU: {{ $item->getSku() }}</p>
                                    @if ($item->variant_attributes)
                                        <div class="flex flex-wrap gap-2 mt-1">
                                            @foreach ($item->variant_attributes as $attribute => $value)
                                                <span
                                                    class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                                                    {{ $attribute }}: {{ $value }}
                                                </span>
                                            @endforeach
                                        </div>
                                    @endif
                                </div>

                                <div class="text-right">
                                    <p class="text-sm text-gray-500">Qty: {{ $item->quantity }}</p>
                                    <p class="font-medium text-gray-900">{{ $item->getLineTotalMoney()->format() }}</p>
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>

                <!-- Addresses -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Billing Address -->
                    <div class="bg-white rounded-lg shadow-sm border border-gray-300 p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Billing Address</h3>
                        <div class="text-sm text-gray-600 space-y-1">
                            <p class="font-medium text-gray-900">
                                {{ $order->billing_address['first_name'] }} {{ $order->billing_address['last_name'] }}
                            </p>
                            @if ($order->billing_address['company'])
                                <p>{{ $order->billing_address['company'] }}</p>
                            @endif
                            <p>{{ $order->billing_address['address_line_1'] }}</p>
                            @if ($order->billing_address['address_line_2'])
                                <p>{{ $order->billing_address['address_line_2'] }}</p>
                            @endif
                            <p>{{ $order->billing_address['city'] }}, {{ $order->billing_address['state_county'] }}
                                {{ $order->billing_address['postal_code'] }}</p>
                            <p>{{ $order->billing_address['country'] }}</p>
                        </div>
                    </div>

                    <!-- Shipping Address -->
                    <div class="bg-white rounded-lg shadow-sm border border-gray-300  p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Shipping Address</h3>
                        <div class="text-sm text-gray-600 space-y-1">
                            <p class="font-medium text-gray-900">
                                {{ $order->shipping_address['first_name'] }} {{ $order->shipping_address['last_name'] }}
                            </p>
                            @if ($order->shipping_address['company'])
                                <p>{{ $order->shipping_address['company'] }}</p>
                            @endif
                            <p>{{ $order->shipping_address['address_line_1'] }}</p>
                            @if ($order->shipping_address['address_line_2'])
                                <p>{{ $order->shipping_address['address_line_2'] }}</p>
                            @endif
                            <p>{{ $order->shipping_address['city'] }}, {{ $order->shipping_address['state_county'] }}
                                {{ $order->shipping_address['postal_code'] }}</p>
                            <p>{{ $order->shipping_address['country'] }}</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow-sm border border-gray-300 p-6 sticky top-24">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Order Summary</h2>

                    <div class="space-y-3 text-sm">
                        <div class="flex justify-between">
                            <span>Subtotal</span>
                            <span>{{ $order->getSubtotalMoney()->format() }}</span>
                        </div>
                        <div class="flex justify-between">
                            <span>VAT</span>
                            <span>{{ $order->getTaxMoney()->format() }}</span>
                        </div>
                        <div class="flex justify-between">
                            <span>Shipping</span>
                            <span>{{ $order->getShippingMoney()->format() }}</span>
                        </div>
                        @if ($order->discount_amount > 0)
                            <div class="flex justify-between text-green-600">
                                <span>Discount</span>
                                <span>-{{ $order->getDiscountMoney()->format() }}</span>
                            </div>
                        @endif
                        <div class="border-t border-gray-300  pt-3 flex justify-between font-medium text-lg">
                            <span>Total</span>
                            <span>{{ $order->getTotalMoney()->format() }}</span>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="mt-6 space-y-3">
                        <a href="{{ route('orders.show', ['orderNumber' => $order->order_number, 'token' => $order->guest_token]) }}"
                            class="block w-full bg-blue-600 text-white text-center py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors">
                            View Order Details
                        </a>
                        <a href="{{ route('products.index') }}"
                            class="block w-full bg-gray-200 text-gray-800 text-center py-3 rounded-lg font-medium hover:bg-gray-300 transition-colors">
                            Continue Shopping
                        </a>
                    </div>

                    <!-- Contact Information -->
                    <div class="mt-6 pt-6 border-t border-gray-300  text-center">
                        <h3 class="text-sm font-medium text-gray-900 mb-2">Need Help?</h3>
                        <p class="text-sm text-gray-600 mb-3">
                            We'll send you shipping and tracking information via email to
                            <strong>{{ $order->customer->email }}</strong>
                        </p>
                        <p class="text-sm text-gray-600">
                            Questions? Contact us at
                            <a href="mailto:support@example.com" class="text-blue-600 hover:text-blue-700">
                                support@example.com
                            </a>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        @if ($order->customer_notes)
            <!-- Customer Notes -->
            <div class="mt-8 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <h3 class="text-sm font-medium text-yellow-800 mb-2">Order Notes</h3>
                <p class="text-sm text-yellow-700">{{ $order->customer_notes }}</p>
            </div>
        @endif
    </div>
@endsection
</file>

<file path="resources/views/frontend/checkout/index.blade.php">
{{-- resources/views/frontend/checkout/index.blade.php --}}
@extends('layouts.frontend')

@section('title', 'Checkout - ' . config('app.name'))

@section('content')
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="lg:grid lg:grid-cols-2 lg:gap-12">
            <!-- Checkout Form -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow-sm border border-gray-300 p-6">
                    <h1 class="text-2xl font-bold text-gray-900 mb-6">Checkout</h1>

                    <form id="checkout-form" x-data="checkoutForm()">
                        <!-- Customer Information -->
                        <div class="mb-8">
                            <h2 class="text-lg font-medium text-gray-900 mb-4">Contact Information</h2>
                            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                                    <input type="text" x-model="customer.first_name" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                                    <input type="text" x-model="customer.last_name" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                                    <input type="email" x-model="customer.email" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Phone Number
                                        (Optional)</label>
                                    <input type="tel" x-model="customer.phone"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                            </div>
                        </div>

                        <!-- Billing Address -->
                        <div class="mb-8">
                            <h2 class="text-lg font-medium text-gray-900 mb-4">Billing Address</h2>
                            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                                    <input type="text" x-model="billing_address.first_name" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                                    <input type="text" x-model="billing_address.last_name" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Company (Optional)</label>
                                    <input type="text" x-model="billing_address.company"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Address</label>
                                    <input type="text" x-model="billing_address.address_line_1" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Address Line 2
                                        (Optional)</label>
                                    <input type="text" x-model="billing_address.address_line_2"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">City</label>
                                    <input type="text" x-model="billing_address.city" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">County</label>
                                    <input type="text" x-model="billing_address.state_county" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Postal Code</label>
                                    <input type="text" x-model="billing_address.postal_code" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <!-- REMOVED: Country field from billing address -->
                            </div>
                        </div>

                        <!-- Shipping Address -->
                        <div class="mb-8">
                            <div class="flex items-center justify-between mb-4">
                                <h2 class="text-lg font-medium text-gray-900">Shipping Address</h2>
                                <label class="flex items-center">
                                    <input type="checkbox" x-model="sameAsBilling" @change="copyBillingToShipping()"
                                        class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                                    <span class="ml-2 text-sm text-gray-600">Same as billing address</span>
                                </label>
                            </div>

                            <div x-show="!sameAsBilling" class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                                    <input type="text" x-model="shipping_address.first_name"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                                    <input type="text" x-model="shipping_address.last_name"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Company (Optional)</label>
                                    <input type="text" x-model="shipping_address.company"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Address</label>
                                    <input type="text" x-model="shipping_address.address_line_1"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Address Line 2
                                        (Optional)</label>
                                    <input type="text" x-model="shipping_address.address_line_2"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">City</label>
                                    <input type="text" x-model="shipping_address.city"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">County</label>
                                    <input type="text" x-model="shipping_address.state_county"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Postal Code</label>
                                    <input type="text" x-model="shipping_address.postal_code"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <!-- REMOVED: Country field from shipping address -->
                            </div>
                        </div>

                        <!-- Country Selection (Single Field) -->
                        <div class="mb-8">
                            <h2 class="text-lg font-medium text-gray-900 mb-4">Shipping Country</h2>
                            <div class="max-w-xs">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Country</label>
                                <div class="relative">
                                    <input type="text" value="United Kingdom" readonly
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-600 cursor-not-allowed">
                                    <input type="hidden" x-model="country" value="GB">
                                </div>
                                <p class="mt-1 text-xs text-gray-500">Currently shipping to UK only</p>
                            </div>
                        </div>

                        <!-- Order Notes -->
                        <div class="mb-8">
                            <h2 class="text-lg font-medium text-gray-900 mb-4">Order Notes (Optional)</h2>
                            <textarea x-model="customer_notes" rows="3" placeholder="Any special instructions for your order..."
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"></textarea>
                        </div>

                        <!-- Payment Section -->
                        <div class="mb-8">
                            <h2 class="text-lg font-medium text-gray-900 mb-4">Payment Information</h2>
                            <div id="payment-element" class="p-4 border border-gray-300 rounded-md bg-gray-50">
                                <!-- Stripe Elements will be mounted here -->
                                <div class="text-center text-gray-500">
                                    <svg class="mx-auto h-8 w-8 mb-2" fill="none" stroke="currentColor"
                                        viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z">
                                        </path>
                                    </svg>
                                    Payment form will appear here after filling in your details
                                </div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <button type="button" @click="processPayment()" :disabled="processing"
                            :class="{
                                'bg-gray-400 cursor-not-allowed': processing,
                                'bg-blue-600 hover:bg-blue-700': !processing
                            }"
                            class="w-full py-3 px-4 text-white font-medium rounded-lg focus:ring-2 focus:ring-blue-500 transition-colors">
                            <span x-show="!processing">Complete Order</span>
                            <span x-show="processing" class="flex items-center justify-center">
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg"
                                    fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10"
                                        stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor"
                                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                                    </path>
                                </svg>
                                Processing...
                            </span>
                        </button>
                    </form>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="lg:col-span-1 mt-8 lg:mt-0">
                <div class="bg-white rounded-lg shadow-sm border border-gray-300 p-6 sticky top-24">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Order Summary</h2>

                    <!-- Cart Items -->
                    <div class="space-y-4 mb-6">
                        @foreach ($summary['items'] as $item)
                            <div class="flex items-center space-x-3">
                                <div class="flex-shrink-0 w-12 h-12 bg-gray-200 rounded overflow-hidden">
                                    @if ($item['image'])
                                        <img src="{{ Storage::url($item['image']) }}" alt="{{ $item['name'] }}"
                                            class="w-full h-full object-cover">
                                    @else
                                        <div class="w-full h-full flex items-center justify-center">
                                            <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                                </path>
                                            </svg>
                                        </div>
                                    @endif
                                </div>
                                <div class="flex-1 min-w-0">
                                    <h4 class="text-sm font-medium text-gray-900">{{ $item['name'] }}</h4>
                                    <p class="text-sm text-gray-500">Qty: {{ $item['quantity'] }}</p>
                                </div>
                                <p class="text-sm font-medium text-gray-900">
                                    £{{ number_format($item['price'] * $item['quantity'], 2) }}
                                </p>
                            </div>
                        @endforeach
                    </div>

                    <!-- Order Totals -->
                    <div class="border-t border-gray-300 pt-4 space-y-2">
                        <div class="flex justify-between text-sm">
                            <span>Subtotal</span>
                            <span>£{{ number_format($summary['subtotal'], 2) }}</span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span>VAT (20%)</span>
                            <span>£{{ number_format($summary['tax_amount'], 2) }}</span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span>Shipping</span>
                            <span>£{{ number_format($summary['shipping_amount'], 2) }}</span>
                        </div>
                        <div class="border-t border-gray-300 pt-2 flex justify-between font-medium text-lg">
                            <span>Total</span>
                            <span>£{{ number_format($summary['total'], 2) }}</span>
                        </div>
                    </div>

                    <!-- Security Notice -->
                    <div class="mt-6 text-center">
                        <div class="flex items-center justify-center text-sm text-gray-500 mb-2">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z">
                                </path>
                            </svg>
                            Secure 256-bit SSL encryption
                        </div>
                        <p class="text-xs text-gray-400">Your payment information is protected</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Stripe JavaScript -->
    <script src="https://js.stripe.com/v3/"></script>

    <script>
        function checkoutForm() {
            return {
                // Form data
                customer: {
                    first_name: '',
                    last_name: '',
                    email: '',
                    phone: ''
                },
                billing_address: {
                    first_name: '',
                    last_name: '',
                    company: '',
                    address_line_1: '',
                    address_line_2: '',
                    city: '',
                    state_county: '',
                    postal_code: '',
                    country: 'GB' // Fixed to GB
                },
                shipping_address: {
                    first_name: '',
                    last_name: '',
                    company: '',
                    address_line_1: '',
                    address_line_2: '',
                    city: '',
                    state_county: '',
                    postal_code: '',
                    country: 'GB' // Fixed to GB
                },
                customer_notes: '',
                sameAsBilling: true,
                processing: false,
                country: 'GB', // Single country field

                // Stripe
                stripe: null,
                elements: null,
                paymentElement: null,
                clientSecret: null,
                orderId: null,
                stripeInitialized: false, // Flag to prevent re-initialization

                init() {

                    this.billing_address.country = this.country;
                    this.shipping_address.country = this.country;

                    // Copy billing to shipping initially
                    this.copyBillingToShipping();

                    // Watch for changes in billing address
                    this.$watch('billing_address', () => {
                        if (this.sameAsBilling) {
                            this.copyBillingToShipping();
                        }
                    }, {
                        deep: true
                    });

                    // Watch for form completion to initialize Stripe (with debounce)
                    let timeoutId;
                    const watchCallback = () => {
                        if (!this.stripeInitialized) {
                            clearTimeout(timeoutId);
                            timeoutId = setTimeout(() => {
                                this.checkFormAndInitializeStripe();
                            }, 500); // 500ms debounce
                        }
                    };

                    this.$watch('customer', watchCallback, {
                        deep: true
                    });
                    this.$watch('billing_address', watchCallback, {
                        deep: true
                    });
                },

                copyBillingToShipping() {
                    if (this.sameAsBilling) {
                        this.shipping_address = {
                            ...this.billing_address,
                            country: this.country // Ensure country is copied
                        };
                    }
                },

                checkFormAndInitializeStripe() {
                    // Prevent multiple initializations
                    if (this.stripeInitialized) {
                        return;
                    }

                    // Check if basic form fields are filled INCLUDING country
                    if (this.customer.first_name &&
                        this.customer.last_name &&
                        this.customer.email &&
                        this.billing_address.first_name &&
                        this.billing_address.address_line_1 &&
                        this.billing_address.city &&
                        this.billing_address.postal_code &&
                        this.billing_address.state_county && // Added this
                        this.country) { // Added country validation

                        this.initializeStripe();
                    }
                },

                async initializeStripe() {
                    // Double check to prevent race conditions
                    if (this.stripeInitialized) {
                        return;
                    }

                    this.stripeInitialized = true; // Set flag immediately

                    try {
                        // Initialize checkout
                        const response = await fetch('{{ route('api.checkout.initialize') }}', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute(
                                    'content')
                            },
                            body: JSON.stringify({
                                customer: this.customer,
                                billing_address: this.billing_address,
                                shipping_address: this.sameAsBilling ? this.billing_address : this
                                    .shipping_address,
                                customer_notes: this.customer_notes
                            })
                        });

                        const result = await response.json();

                        if (!result.success) {
                            throw new Error(result.message);
                        }

                        this.clientSecret = result.client_secret;
                        this.orderId = result.order_id;

                        // Initialize Stripe
                        this.stripe = Stripe('{{ config('services.stripe.key') }}');
                        this.elements = this.stripe.elements({
                            clientSecret: this.clientSecret
                        });

                        // Create payment element
                        this.paymentElement = this.elements.create('payment');
                        this.paymentElement.mount('#payment-element');

                    } catch (error) {
                        console.error('Error initializing checkout:', error);
                        this.stripeInitialized = false; // Reset flag on error
                        showToast('Error initializing checkout: ' + error.message, 'error');
                    }
                },

                async processPayment() {
                    if (!this.stripe || !this.paymentElement) {
                        showToast('Payment system not ready. Please try again.', 'error');
                        return;
                    }

                    this.processing = true;

                    try {
                        const {
                            error
                        } = await this.stripe.confirmPayment({
                            elements: this.elements,
                            confirmParams: {
                                return_url: window.location.origin + '/checkout/complete'
                            },
                            redirect: 'if_required'
                        });

                        if (error) {
                            throw error;
                        }

                        // Payment succeeded
                        const completeResponse = await fetch('{{ route('api.checkout.complete') }}', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute(
                                    'content')
                            },
                            body: JSON.stringify({
                                order_id: this.orderId,
                                payment_intent_id: this.clientSecret.split('_secret_')[0]
                            })
                        });

                        const completeResult = await completeResponse.json();

                        if (completeResult.success) {
                            // Redirect to confirmation page
                            window.location.href = completeResult.redirect_url;
                        } else {
                            throw new Error(completeResult.message);
                        }

                    } catch (error) {
                        console.error('Payment error:', error);
                        showToast('Payment failed: ' + error.message, 'error');

                        // Record error
                        if (this.orderId) {
                            fetch('{{ route('api.checkout.error') }}', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')
                                        .getAttribute('content')
                                },
                                body: JSON.stringify({
                                    order_id: this.orderId,
                                    error_message: error.message
                                })
                            });
                        }
                    } finally {
                        this.processing = false;
                    }
                }
            }
        }
    </script>
@endsection
</file>

<file path="resources/views/frontend/orders/index.blade.php">
{{-- resources/views/frontend/checkout/index.blade.php --}}
@extends('layouts.frontend')

@section('title', 'Checkout - ' . config('app.name'))

@section('content')
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="lg:grid lg:grid-cols-2 lg:gap-12">
            <!-- Checkout Form -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow-sm border border-gray-300 p-6">
                    <h1 class="text-2xl font-bold text-gray-900 mb-6">Checkout</h1>

                    <form id="checkout-form" x-data="checkoutForm()">
                        <!-- Customer Information -->
                        <div class="mb-8">
                            <h2 class="text-lg font-medium text-gray-900 mb-4">Contact Information</h2>
                            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                                    <input type="text" x-model="customer.first_name" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                                    <input type="text" x-model="customer.last_name" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                                    <input type="email" x-model="customer.email" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Phone Number
                                        (Optional)</label>
                                    <input type="tel" x-model="customer.phone"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                            </div>
                        </div>

                        <!-- Billing Address -->
                        <div class="mb-8">
                            <h2 class="text-lg font-medium text-gray-900 mb-4">Billing Address</h2>
                            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                                    <input type="text" x-model="billing_address.first_name" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                                    <input type="text" x-model="billing_address.last_name" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Company (Optional)</label>
                                    <input type="text" x-model="billing_address.company"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Address</label>
                                    <input type="text" x-model="billing_address.address_line_1" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Address Line 2
                                        (Optional)</label>
                                    <input type="text" x-model="billing_address.address_line_2"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">City</label>
                                    <input type="text" x-model="billing_address.city" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">County</label>
                                    <input type="text" x-model="billing_address.state_county" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Postal Code</label>
                                    <input type="text" x-model="billing_address.postal_code" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Country</label>
                                    <select x-model="billing_address.country" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                        <option value="GB">United Kingdom</option>
                                        <option value="US">United States</option>
                                        <option value="CA">Canada</option>
                                        <option value="AU">Australia</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Shipping Address -->
                        <div class="mb-8">
                            <div class="flex items-center justify-between mb-4">
                                <h2 class="text-lg font-medium text-gray-900">Shipping Address</h2>
                                <label class="flex items-center">
                                    <input type="checkbox" x-model="sameAsBilling" @change="copyBillingToShipping()"
                                        class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                                    <span class="ml-2 text-sm text-gray-600">Same as billing address</span>
                                </label>
                            </div>

                            <div x-show="!sameAsBilling" class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                                    <input type="text" x-model="shipping_address.first_name"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                                    <input type="text" x-model="shipping_address.last_name"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Company (Optional)</label>
                                    <input type="text" x-model="shipping_address.company"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Address</label>
                                    <input type="text" x-model="shipping_address.address_line_1"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Address Line 2
                                        (Optional)</label>
                                    <input type="text" x-model="shipping_address.address_line_2"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">City</label>
                                    <input type="text" x-model="shipping_address.city"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">County</label>
                                    <input type="text" x-model="shipping_address.state_county"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Postal Code</label>
                                    <input type="text" x-model="shipping_address.postal_code"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Country</label>
                                    <select x-model="shipping_address.country"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                                        <option value="GB">United Kingdom</option>
                                        <option value="US">United States</option>
                                        <option value="CA">Canada</option>
                                        <option value="AU">Australia</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Order Notes -->
                        <div class="mb-8">
                            <h2 class="text-lg font-medium text-gray-900 mb-4">Order Notes (Optional)</h2>
                            <textarea x-model="customer_notes" rows="3" placeholder="Any special instructions for your order..."
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"></textarea>
                        </div>

                        <!-- Payment Section -->
                        <div class="mb-8">
                            <h2 class="text-lg font-medium text-gray-900 mb-4">Payment Information</h2>
                            <div id="payment-element" class="p-4 border border-gray-300 rounded-md bg-gray-50">
                                <!-- Stripe Elements will be mounted here -->
                                <div class="text-center text-gray-500">
                                    <svg class="mx-auto h-8 w-8 mb-2" fill="none" stroke="currentColor"
                                        viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z">
                                        </path>
                                    </svg>
                                    Payment form will appear here after filling in your details
                                </div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <button type="button" @click="processPayment()" :disabled="processing"
                            :class="{
                                'bg-gray-400 cursor-not-allowed': processing,
                                'bg-blue-600 hover:bg-blue-700': !processing
                            }"
                            class="w-full py-3 px-4 text-white font-medium rounded-lg focus:ring-2 focus:ring-blue-500 transition-colors">
                            <span x-show="!processing">Complete Order</span>
                            <span x-show="processing" class="flex items-center justify-center">
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg"
                                    fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10"
                                        stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor"
                                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                                    </path>
                                </svg>
                                Processing...
                            </span>
                        </button>
                    </form>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="lg:col-span-1 mt-8 lg:mt-0">
                <div class="bg-white rounded-lg shadow-sm border border-gray-300  p-6 sticky top-24">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Order Summary</h2>

                    <!-- Cart Items -->
                    <div class="space-y-4 mb-6">
                        @foreach ($summary['items'] as $item)
                            <div class="flex items-center space-x-3">
                                <div class="flex-shrink-0 w-12 h-12 bg-gray-200 rounded overflow-hidden">
                                    @if ($item['image'])
                                        <img src="{{ Storage::url($item['image']) }}" alt="{{ $item['name'] }}"
                                            class="w-full h-full object-cover">
                                    @else
                                        <div class="w-full h-full flex items-center justify-center">
                                            <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                                </path>
                                            </svg>
                                        </div>
                                    @endif
                                </div>
                                <div class="flex-1 min-w-0">
                                    <h4 class="text-sm font-medium text-gray-900">{{ $item['name'] }}</h4>
                                    <p class="text-sm text-gray-500">Qty: {{ $item['quantity'] }}</p>
                                </div>
                                <p class="text-sm font-medium text-gray-900">
                                    £{{ number_format($item['price'] * $item['quantity'], 2) }}
                                </p>
                            </div>
                        @endforeach
                    </div>

                    <!-- Order Totals -->
                    <div class="border-t pt-4 space-y-2">
                        <div class="flex justify-between text-sm">
                            <span>Subtotal</span>
                            <span>£{{ number_format($summary['subtotal'], 2) }}</span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span>VAT (20%)</span>
                            <span>£{{ number_format($summary['tax_amount'], 2) }}</span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span>Shipping</span>
                            <span>£{{ number_format($summary['shipping_amount'], 2) }}</span>
                        </div>
                        <div class="border-t pt-2 flex justify-between font-medium text-lg">
                            <span>Total</span>
                            <span>£{{ number_format($summary['total'], 2) }}</span>
                        </div>
                    </div>

                    <!-- Security Notice -->
                    <div class="mt-6 text-center">
                        <div class="flex items-center justify-center text-sm text-gray-500 mb-2">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z">
                                </path>
                            </svg>
                            Secure 256-bit SSL encryption
                        </div>
                        <p class="text-xs text-gray-400">Your payment information is protected</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Stripe JavaScript -->
    <script src="https://js.stripe.com/v3/"></script>

    <script>
        function checkoutForm() {
            return {
                // Form data
                customer: {
                    first_name: '',
                    last_name: '',
                    email: '',
                    phone: ''
                },
                billing_address: {
                    first_name: '',
                    last_name: '',
                    company: '',
                    address_line_1: '',
                    address_line_2: '',
                    city: '',
                    state_county: '', // Ensure it's an empty string, not null
                    postal_code: '',
                    country: 'GB'
                },
                shipping_address: {
                    first_name: '',
                    last_name: '',
                    company: '',
                    address_line_1: '',
                    address_line_2: '',
                    city: '',
                    state_county: '', // Ensure it's an empty string, not null
                    postal_code: '',
                    country: 'GB'
                },
                customer_notes: '',
                sameAsBilling: true,
                processing: false,

                // Stripe
                stripe: null,
                elements: null,
                paymentElement: null,
                clientSecret: null,
                orderId: null,

                init() {
                    // Copy billing to shipping initially
                    this.copyBillingToShipping();

                    // Watch for changes in billing address
                    this.$watch('billing_address', () => {
                        if (this.sameAsBilling) {
                            this.copyBillingToShipping();
                        }
                    }, {
                        deep: true
                    });

                    // Watch for form completion to initialize Stripe
                    this.$watch('customer', () => this.checkFormAndInitializeStripe(), {
                        deep: true
                    });
                    this.$watch('billing_address', () => this.checkFormAndInitializeStripe(), {
                        deep: true
                    });
                },

                copyBillingToShipping() {
                    if (this.sameAsBilling) {
                        this.shipping_address = {
                            ...this.billing_address
                        };
                    }
                },

                checkFormAndInitializeStripe() {
                    // Check if basic form fields are filled
                    if (this.customer.first_name && this.customer.last_name && this.customer.email &&
                        this.billing_address.first_name && this.billing_address.address_line_1 &&
                        this.billing_address.city && this.billing_address.postal_code) {

                        console.log('Form validation passed, checking Stripe initialization...');
                        console.log('Customer data:', this.customer);
                        console.log('Billing address:', this.billing_address);
                        console.log('Shipping address:', this.shipping_address);
                        console.log('Same as billing:', this.sameAsBilling);

                        if (!this.stripe) {
                            this.initializeStripe();
                        }
                    } else {
                        console.log('Form validation failed - missing required fields');
                        console.log('Customer:', this.customer);
                        console.log('Billing:', this.billing_address);
                    }
                },

                async initializeStripe() {
                    try {
                        const requestData = {
                            customer: this.customer,
                            billing_address: this.billing_address,
                            shipping_address: this.sameAsBilling ? this.billing_address : this.shipping_address,
                            customer_notes: this.customer_notes
                        };

                        console.log('Sending request data:', requestData);

                        // Initialize checkout
                        const response = await fetch('{{ route('api.checkout.initialize') }}', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute(
                                    'content'),
                                'Accept': 'application/json' // This is important!
                            },
                            body: JSON.stringify(requestData)
                        });

                        // Debug: Log the response
                        console.log('Response status:', response.status);
                        console.log('Response content-type:', response.headers.get('content-type'));

                        const responseText = await response.text();
                        console.log('Raw response (first 500 chars):', responseText.substring(0, 500));

                        // If response is not ok, show more details
                        if (!response.ok) {
                            console.error('HTTP Error:', response.status, response.statusText);

                            // For validation errors (422), show detailed errors
                            if (response.status === 422) {
                                try {
                                    const errorResult = JSON.parse(responseText);
                                    console.error('Validation errors:', errorResult);

                                    if (errorResult.errors) {
                                        // Show specific field errors
                                        Object.keys(errorResult.errors).forEach(field => {
                                            console.error(`${field}: ${errorResult.errors[field].join(', ')}`);
                                        });
                                    }

                                    throw new Error('Validation failed: ' + (errorResult.message ||
                                        'Please check the form data'));
                                } catch (parseError) {
                                    console.error('Could not parse validation error response');
                                }
                            }

                            throw new Error(`HTTP ${response.status}: Server returned an error`);
                        }

                        // Try to parse as JSON
                        let result;
                        try {
                            result = JSON.parse(responseText);
                        } catch (parseError) {
                            console.error('JSON parse error:', parseError);
                            console.error('Response was:', responseText);
                            throw new Error('Server returned invalid JSON response');
                        }

                        console.log('Parsed result:', result);

                        if (!result.success) {
                            throw new Error(result.message || 'Checkout initialization failed');
                        }

                        this.clientSecret = result.client_secret;
                        this.orderId = result.order_id;

                        // Initialize Stripe
                        this.stripe = Stripe('{{ config('services.stripe.key') }}');
                        this.elements = this.stripe.elements({
                            clientSecret: this.clientSecret
                        });

                        // Create payment element
                        this.paymentElement = this.elements.create('payment');
                        this.paymentElement.mount('#payment-element');

                    } catch (error) {
                        console.error('Error initializing checkout:', error);
                        showToast('Error initializing checkout: ' + error.message, 'error');
                    }
                },

                async processPayment() {
                    if (!this.stripe || !this.paymentElement) {
                        showToast('Payment system not ready. Please try again.', 'error');
                        return;
                    }

                    this.processing = true;

                    try {
                        const {
                            error
                        } = await this.stripe.confirmPayment({
                            elements: this.elements,
                            confirmParams: {
                                return_url: window.location.origin + '/checkout/complete'
                            },
                            redirect: 'if_required'
                        });

                        if (error) {
                            throw error;
                        }

                        // Payment succeeded
                        const completeResponse = await fetch('{{ route('api.checkout.complete') }}', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute(
                                    'content')
                            },
                            body: JSON.stringify({
                                order_id: this.orderId,
                                payment_intent_id: this.clientSecret.split('_secret_')[0]
                            })
                        });

                        const completeResult = await completeResponse.json();

                        if (completeResult.success) {
                            // Redirect to confirmation page
                            window.location.href = completeResult.redirect_url;
                        } else {
                            throw new Error(completeResult.message);
                        }

                    } catch (error) {
                        console.error('Payment error:', error);
                        showToast('Payment failed: ' + error.message, 'error');

                        // Record error
                        if (this.orderId) {
                            fetch('{{ route('api.checkout.error') }}', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')
                                        .getAttribute('content')
                                },
                                body: JSON.stringify({
                                    order_id: this.orderId,
                                    error_message: error.message
                                })
                            });
                        }
                    } finally {
                        this.processing = false;
                    }
                }
            }
        }
    </script>
@endsection
</file>

<file path="resources/views/frontend/orders/show.blade.php">
{{-- resources/views/frontend/orders/show.blade.php --}}
@extends('layouts.frontend')

@section('title', 'Order ' . $order->order_number . ' - ' . config('app.name'))

@section('content')
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Order Header -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-300 p-6 mb-8">
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900 mb-2">Order {{ $order->order_number }}</h1>
                    <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600">
                        <span>Placed on {{ $order->created_at->format('M j, Y \a\t g:i A') }}</span>
                        <span
                            class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium
                            @if ($order->status === 'completed') bg-green-100 text-green-800
                            @elseif($order->status === 'processing') bg-blue-100 text-blue-800
                            @elseif($order->status === 'fulfilled') bg-purple-100 text-purple-800
                            @elseif($order->status === 'cancelled') bg-red-100 text-red-800
                            @elseif($order->status === 'pending_payment') bg-yellow-100 text-yellow-800
                            @else bg-gray-100 text-gray-800 @endif">
                            {{ ucfirst(str_replace('_', ' ', $order->status)) }}
                        </span>
                        @if ($order->payment_status === 'succeeded')
                            <span
                                class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd"
                                        d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                        clip-rule="evenodd" />
                                </svg>
                                Paid
                            </span>
                        @endif
                    </div>
                </div>

                <div class="mt-4 lg:mt-0 flex flex-col sm:flex-row gap-3">
                    @auth
                        <a href="{{ route('orders.index') }}"
                            class="bg-gray-200 text-gray-800 text-center py-2 px-4 rounded-md font-medium hover:bg-gray-300 transition-colors">
                            ← Back to Orders
                        </a>
                    @else
                        <a href="{{ route('orders.track') }}"
                            class="bg-gray-200 text-gray-800 text-center py-2 px-4 rounded-md font-medium hover:bg-gray-300 transition-colors">
                            ← Track Another Order
                        </a>
                    @endauth

                    @if ($order->canBeCancelled())
                        <button onclick="confirmCancellation()"
                            class="bg-red-600 text-white text-center py-2 px-4 rounded-md font-medium hover:bg-red-700 transition-colors">
                            Cancel Order
                        </button>
                    @endif
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Main Content -->
            <div class="lg:col-span-2 space-y-8">
                <!-- Order Status Timeline -->
                @if ($order->statusHistories->count() > 0)
                    <div class="bg-white rounded-lg shadow-sm border p-6">
                        <h2 class="text-lg font-medium text-gray-900 mb-6">Order Status</h2>

                        <div class="flow-root">
                            <ul class="-mb-8">
                                @foreach ($order->statusHistories as $history)
                                    <li>
                                        <div class="relative pb-8 @if ($loop->last) pb-0 @endif">
                                            @if (!$loop->last)
                                                <span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200"
                                                    aria-hidden="true"></span>
                                            @endif

                                            <div class="relative flex space-x-3">
                                                <div>
                                                    <span
                                                        class="h-8 w-8 rounded-full flex items-center justify-center ring-8 ring-white
                                                        @if ($history->to_status === 'completed') bg-green-500
                                                        @elseif($history->to_status === 'cancelled') bg-red-500
                                                        @elseif($history->to_status === 'processing') bg-blue-500
                                                        @elseif($history->to_status === 'fulfilled') bg-purple-500
                                                        @else bg-gray-400 @endif">
                                                        @if ($history->to_status === 'completed')
                                                            <svg class="w-5 h-5 text-white" fill="currentColor"
                                                                viewBox="0 0 20 20">
                                                                <path fill-rule="evenodd"
                                                                    d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                                                    clip-rule="evenodd" />
                                                            </svg>
                                                        @elseif($history->to_status === 'cancelled')
                                                            <svg class="w-5 h-5 text-white" fill="currentColor"
                                                                viewBox="0 0 20 20">
                                                                <path fill-rule="evenodd"
                                                                    d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                                                                    clip-rule="evenodd" />
                                                            </svg>
                                                        @elseif($history->to_status === 'fulfilled')
                                                            <svg class="w-5 h-5 text-white" fill="currentColor"
                                                                viewBox="0 0 20 20">
                                                                <path
                                                                    d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z" />
                                                                <path
                                                                    d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1V8a1 1 0 00-1-1h-3z" />
                                                            </svg>
                                                        @else
                                                            <svg class="w-5 h-5 text-white" fill="currentColor"
                                                                viewBox="0 0 20 20">
                                                                <path fill-rule="evenodd"
                                                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                                                    clip-rule="evenodd" />
                                                            </svg>
                                                        @endif
                                                    </span>
                                                </div>
                                                <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                                                    <div>
                                                        <p class="text-sm font-medium text-gray-900">
                                                            {{ $history->getStatusChangeDescription() }}
                                                        </p>
                                                        @if ($history->notes)
                                                            <p class="text-sm text-gray-500 mt-1">{{ $history->notes }}</p>
                                                        @endif
                                                        @if ($history->user)
                                                            <p class="text-xs text-gray-400 mt-1">Updated by
                                                                {{ $history->getUserName() }}</p>
                                                        @endif
                                                    </div>
                                                    <div class="text-right text-sm whitespace-nowrap text-gray-500">
                                                        <time>{{ $history->created_at->format('M j, g:i A') }}</time>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </li>
                                @endforeach
                            </ul>
                        </div>
                    </div>
                @endif

                <!-- Order Items -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-300  p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-6">Order Items</h2>

                    <div class="space-y-6">
                        @foreach ($order->items as $item)
                            <div class="flex items-start space-x-4 py-4 border-b border-gray-200 last:border-b-0 last:pb-0">
                                <div class="flex-shrink-0 w-20 h-20 bg-gray-200 rounded-lg overflow-hidden">
                                    @if ($item->product_image)
                                        <img src="{{ Storage::url($item->product_image) }}"
                                            alt="{{ $item->getDisplayName() }}" class="w-full h-full object-cover">
                                    @else
                                        <div class="w-full h-full flex items-center justify-center">
                                            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                                </path>
                                            </svg>
                                        </div>
                                    @endif
                                </div>

                                <div class="flex-1 min-w-0">
                                    <h3 class="text-lg font-medium text-gray-900">{{ $item->getDisplayName() }}</h3>
                                    <p class="text-sm text-gray-500 mb-2">SKU: {{ $item->getSku() }}</p>

                                    @if ($item->variant_attributes)
                                        <div class="flex flex-wrap gap-2 mb-3">
                                            @foreach ($item->variant_attributes as $attribute => $value)
                                                <span
                                                    class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800">
                                                    {{ $attribute }}: {{ $value }}
                                                </span>
                                            @endforeach
                                        </div>
                                    @endif

                                    @if ($item->product_description)
                                        <p class="text-sm text-gray-600 mb-3">{{ $item->product_description }}</p>
                                    @endif

                                    <div class="flex flex-wrap items-center gap-4 text-sm">
                                        <span class="text-gray-500">Qty: {{ $item->quantity }}</span>
                                        <span class="text-gray-500">Unit Price:
                                            {{ $item->getUnitPriceMoney()->format() }}</span>
                                        @if ($item->compare_price && $item->compare_price > $item->unit_price)
                                            <span
                                                class="text-gray-400 line-through">{{ Money::fromCents($item->compare_price, $order->currency)->format() }}</span>
                                            <span
                                                class="text-green-600 text-xs font-medium">{{ $item->getDiscountPercentage() }}%
                                                off</span>
                                        @endif
                                    </div>

                                    @if ($item->quantity_fulfilled > 0)
                                        <div class="mt-2 text-sm">
                                            <span class="text-green-600 font-medium">{{ $item->quantity_fulfilled }}
                                                fulfilled</span>
                                            @if ($item->getQuantityPending() > 0)
                                                <span class="text-gray-500"> • {{ $item->getQuantityPending() }}
                                                    pending</span>
                                            @endif
                                        </div>
                                    @endif
                                </div>

                                <div class="text-right">
                                    <p class="text-lg font-medium text-gray-900">{{ $item->getLineTotalMoney()->format() }}
                                    </p>
                                    @if ($item->tax_amount > 0)
                                        <p class="text-sm text-gray-500">Inc. {{ $item->getTaxMoney()->format() }} VAT</p>
                                    @endif
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>

                <!-- Addresses -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Billing Address -->
                    <div class="bg-white rounded-lg shadow-sm border  border-gray-300  p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Billing Address</h3>
                        <div class="text-sm text-gray-600 space-y-1">
                            <p class="font-medium text-gray-900">
                                {{ $order->billing_address['first_name'] }} {{ $order->billing_address['last_name'] }}
                            </p>
                            @if ($order->billing_address['company'])
                                <p>{{ $order->billing_address['company'] }}</p>
                            @endif
                            <p>{{ $order->billing_address['address_line_1'] }}</p>
                            @if ($order->billing_address['address_line_2'])
                                <p>{{ $order->billing_address['address_line_2'] }}</p>
                            @endif
                            <p>{{ $order->billing_address['city'] }}, {{ $order->billing_address['state_county'] }}
                                {{ $order->billing_address['postal_code'] }}</p>
                            <p>{{ $order->billing_address['country'] }}</p>
                        </div>
                    </div>

                    <!-- Shipping Address -->
                    <div class="bg-white rounded-lg shadow-sm border p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Shipping Address</h3>
                        <div class="text-sm text-gray-600 space-y-1">
                            <p class="font-medium text-gray-900">
                                {{ $order->shipping_address['first_name'] }} {{ $order->shipping_address['last_name'] }}
                            </p>
                            @if ($order->shipping_address['company'])
                                <p>{{ $order->shipping_address['company'] }}</p>
                            @endif
                            <p>{{ $order->shipping_address['address_line_1'] }}</p>
                            @if ($order->shipping_address['address_line_2'])
                                <p>{{ $order->shipping_address['address_line_2'] }}</p>
                            @endif
                            <p>{{ $order->shipping_address['city'] }}, {{ $order->shipping_address['state_county'] }}
                                {{ $order->shipping_address['postal_code'] }}</p>
                            <p>{{ $order->shipping_address['country'] }}</p>
                        </div>

                        @if ($order->status === 'fulfilled' && $order->shipped_at)
                            <div class="mt-4 pt-4 border-gray-300  border-t">
                                <p class="text-sm font-medium text-gray-900">Shipping Information</p>
                                <p class="text-sm text-gray-600">Shipped on {{ $order->shipped_at->format('M j, Y') }}</p>
                                @if ($order->estimated_delivery_date)
                                    <p class="text-sm text-gray-600">Estimated delivery:
                                        {{ $order->estimated_delivery_date->format('M j, Y') }}</p>
                                @endif
                            </div>
                        @endif
                    </div>
                </div>

                @if ($order->customer_notes)
                    <!-- Customer Notes -->
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <h3 class="text-sm font-medium text-yellow-800 mb-2">Order Notes</h3>
                        <p class="text-sm text-yellow-700">{{ $order->customer_notes }}</p>
                    </div>
                @endif
            </div>

            <!-- Order Summary Sidebar -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow-sm border p-6 sticky top-24">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Order Summary</h2>

                    <!-- Order Totals -->
                    <div class="space-y-3 text-sm">
                        <div class="flex justify-between">
                            <span>Subtotal ({{ $order->getTotalItems() }}
                                {{ Str::plural('item', $order->getTotalItems()) }})</span>
                            <span>{{ $order->getSubtotalMoney()->format() }}</span>
                        </div>

                        @if ($order->tax_amount > 0)
                            <div class="flex justify-between">
                                <span>VAT ({{ number_format($order->tax_rate * 100, 1) }}%)</span>
                                <span>{{ $order->getTaxMoney()->format() }}</span>
                            </div>
                        @endif

                        @if ($order->shipping_amount > 0)
                            <div class="flex justify-between">
                                <span>Shipping</span>
                                <span>{{ $order->getShippingMoney()->format() }}</span>
                            </div>
                        @else
                            <div class="flex justify-between text-green-600">
                                <span>Shipping</span>
                                <span>Free</span>
                            </div>
                        @endif

                        @if ($order->discount_amount > 0)
                            <div class="flex justify-between text-green-600">
                                <span>Discount</span>
                                <span>-{{ $order->getDiscountMoney()->format() }}</span>
                            </div>
                        @endif

                        <div class="border-t pt-3 flex justify-between font-medium text-lg">
                            <span>Total</span>
                            <span>{{ $order->getTotalMoney()->format() }}</span>
                        </div>
                    </div>

                    <!-- Payment Information -->
                    <div class="mt-6 pt-6 border-t">
                        <h3 class="text-sm font-medium text-gray-900 mb-3">Payment Information</h3>
                        <div class="space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span>Payment Status</span>
                                <span
                                    class="font-medium
                                    @if ($order->payment_status === 'succeeded') text-green-600
                                    @elseif($order->payment_status === 'pending') text-yellow-600
                                    @elseif($order->payment_status === 'failed') text-red-600
                                    @else text-gray-600 @endif">
                                    {{ ucfirst($order->payment_status) }}
                                </span>
                            </div>

                            @if ($order->payments->where('status', 'succeeded')->first())
                                @php $payment = $order->payments->where('status', 'succeeded')->first(); @endphp
                                <div class="flex justify-between">
                                    <span>Payment Method</span>
                                    <span>{{ $payment->getPaymentMethodDescription() }}</span>
                                </div>
                                @if ($payment->processed_at)
                                    <div class="flex justify-between">
                                        <span>Paid On</span>
                                        <span>{{ $payment->processed_at->format('M j, Y') }}</span>
                                    </div>
                                @endif
                            @endif
                        </div>
                    </div>

                    <!-- Customer Information -->
                    <div class="mt-6 pt-6 border-t">
                        <h3 class="text-sm font-medium text-gray-900 mb-3">Customer Information</h3>
                        <div class="space-y-2 text-sm text-gray-600">
                            <p>{{ $order->customer_details['first_name'] }} {{ $order->customer_details['last_name'] }}
                            </p>
                            <p>{{ $order->customer_details['email'] }}</p>
                            @if ($order->customer_details['phone'])
                                <p>{{ $order->customer_details['phone'] }}</p>
                            @endif
                        </div>
                    </div>

                    <!-- Actions -->
                    <div class="mt-6 pt-6 border-t space-y-3">
                        @if ($order->status === 'completed')
                            <button
                                class="w-full bg-blue-600 text-white py-2 px-4 rounded-md font-medium hover:bg-blue-700 transition-colors">
                                Reorder Items
                            </button>
                        @endif

                        @if ($order->canBeCancelled())
                            <button onclick="confirmCancellation()"
                                class="w-full bg-red-600 text-white py-2 px-4 rounded-md font-medium hover:bg-red-700 transition-colors">
                                Cancel Order
                            </button>
                        @endif

                        <a href="{{ route('products.index') }}"
                            class="block w-full bg-gray-200 text-gray-800 text-center py-2 px-4 rounded-md font-medium hover:bg-gray-300 transition-colors">
                            Continue Shopping
                        </a>
                    </div>

                    <!-- Contact Support -->
                    <div class="mt-6 pt-6 border-t text-center">
                        <h3 class="text-sm font-medium text-gray-900 mb-2">Need Help?</h3>
                        <p class="text-sm text-gray-600 mb-3">
                            Contact our support team for assistance with your order.
                        </p>
                        <a href="mailto:support@example.com"
                            class="text-blue-600 hover:text-blue-700 text-sm font-medium">
                            support@example.com
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if ($order->canBeCancelled())
        <!-- Cancel Order Modal -->
        <div id="cancel-modal" class="fixed inset-0 z-50 overflow-y-auto hidden" x-data="{ open: false }" x-show="open"
            x-cloak>
            <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @click="open = false"></div>

                <div
                    class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                    <form method="POST" action="{{ route('orders.cancel', $order->order_number) }}">
                        @csrf
                        @guest
                            <input type="hidden" name="token" value="{{ $order->guest_token }}">
                        @endguest

                        <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                            <div class="sm:flex sm:items-start">
                                <div
                                    class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                                    <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24"
                                        stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                                    </svg>
                                </div>
                                <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                                    <h3 class="text-lg leading-6 font-medium text-gray-900">Cancel Order</h3>
                                    <div class="mt-2">
                                        <p class="text-sm text-gray-500">
                                            Are you sure you want to cancel order {{ $order->order_number }}? This action
                                            cannot be undone and any payment will be refunded within 3-5 business days.
                                        </p>
                                        <div class="mt-4">
                                            <label for="reason" class="block text-sm font-medium text-gray-700">Reason
                                                for cancellation (optional)</label>
                                            <textarea name="reason" id="reason" rows="3"
                                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                                                placeholder="Please let us know why you're cancelling..."></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                            <button type="submit"
                                class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm">
                                Cancel Order
                            </button>
                            <button type="button" @click="open = false"
                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                                Keep Order
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <script>
            function confirmCancellation() {
                const modal = document.getElementById('cancel-modal');
                modal.style.display = 'block';
                // Trigger Alpine.js to show modal
                modal.querySelector('[x-data]').__x.$data.open = true;
            }
        </script>
    @endif
@endsection
</file>

<file path="resources/views/frontend/orders/track.blade.php">
{{-- resources/views/frontend/orders/track.blade.php --}}
@extends('layouts.frontend')

@section('title', 'Track Your Order - ' . config('app.name'))

@section('content')
    <div class="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="text-center mb-8">
            <h1 class="text-3xl font-bold text-gray-900 mb-2">Track Your Order</h1>
            <p class="text-gray-600">Enter your order details to track your package</p>
        </div>

        @if (!$order)
            <!-- Order Tracking Form -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-300 p-6">
                <form method="POST" action="{{ route('orders.track.submit') }}">
                    @csrf

                    <div class="space-y-6">
                        <div>
                            <label for="order_number" class="block text-sm font-medium text-gray-700 mb-2">
                                Order Number
                            </label>
                            <input type="text" id="order_number" name="order_number" value="{{ old('order_number') }}"
                                placeholder="e.g., ORD-2024-123456" required
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 @error('order_number') border-red-300 @enderror">
                            @error('order_number')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
                                Email Address
                            </label>
                            <input type="email" id="email" name="email" value="{{ old('email') }}"
                                placeholder="The email address used for your order" required
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 @error('email') border-red-300 @enderror">
                            @error('email')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <button type="submit"
                            class="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 transition-colors">
                            Track Order
                        </button>
                    </div>
                </form>

                <!-- Help Text -->
                <div class="mt-6 pt-6 border-t text-center">
                    <p class="text-sm text-gray-600 mb-2">
                        <strong>Need help finding your order?</strong>
                    </p>
                    <p class="text-sm text-gray-500">
                        Check your email for the order confirmation that contains your order number.
                    </p>
                </div>
            </div>

            <!-- Guest Login Alternative -->
            <div class="mt-8 text-center">
                <p class="text-sm text-gray-600">
                    Have an account?
                    <a href="{{ route('login') }}" class="text-blue-600 hover:text-blue-700 font-medium">
                        Sign in to view all your orders
                    </a>
                </p>
            </div>
        @else
            <!-- Order Found - Display Tracking -->
            <div class="bg-white rounded-lg shadow-sm border p-6 mb-6">
                <div class="flex items-center justify-between mb-6">
                    <div>
                        <h2 class="text-xl font-bold text-gray-900">Order {{ $order->order_number }}</h2>
                        <p class="text-sm text-gray-600">Placed on {{ $order->created_at->format('M j, Y') }}</p>
                    </div>
                    <div class="text-right">
                        <span
                            class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium
                            @if ($order->status === 'completed') bg-green-100 text-green-800
                            @elseif($order->status === 'processing') bg-blue-100 text-blue-800
                            @elseif($order->status === 'fulfilled') bg-purple-100 text-purple-800
                            @elseif($order->status === 'cancelled') bg-red-100 text-red-800
                            @else bg-gray-100 text-gray-800 @endif">
                            {{ ucfirst(str_replace('_', ' ', $order->status)) }}
                        </span>
                    </div>
                </div>

                <!-- Order Status Timeline -->
                <div class="mb-8">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Order Status</h3>

                    <div class="flow-root">
                        <ul class="-mb-8">
                            @foreach ($order->statusHistories as $history)
                                <li>
                                    <div class="relative pb-8 @if ($loop->last) pb-0 @endif">
                                        @if (!$loop->last)
                                            <span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200"
                                                aria-hidden="true"></span>
                                        @endif

                                        <div class="relative flex space-x-3">
                                            <div>
                                                <span
                                                    class="h-8 w-8 rounded-full flex items-center justify-center ring-8 ring-white
                                                    @if ($history->to_status === 'completed') bg-green-500
                                                    @elseif($history->to_status === 'cancelled') bg-red-500
                                                    @elseif($history->to_status === 'processing') bg-blue-500
                                                    @else bg-gray-400 @endif">
                                                    @if ($history->to_status === 'completed')
                                                        <svg class="w-5 h-5 text-white" fill="currentColor"
                                                            viewBox="0 0 20 20">
                                                            <path fill-rule="evenodd"
                                                                d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                                                clip-rule="evenodd" />
                                                        </svg>
                                                    @elseif($history->to_status === 'cancelled')
                                                        <svg class="w-5 h-5 text-white" fill="currentColor"
                                                            viewBox="0 0 20 20">
                                                            <path fill-rule="evenodd"
                                                                d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                                                                clip-rule="evenodd" />
                                                        </svg>
                                                    @else
                                                        <svg class="w-5 h-5 text-white" fill="currentColor"
                                                            viewBox="0 0 20 20">
                                                            <path fill-rule="evenodd"
                                                                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                                                clip-rule="evenodd" />
                                                        </svg>
                                                    @endif
                                                </span>
                                            </div>
                                            <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                                                <div>
                                                    <p class="text-sm font-medium text-gray-900">
                                                        {{ $history->getStatusChangeDescription() }}
                                                    </p>
                                                    @if ($history->notes)
                                                        <p class="text-sm text-gray-500">{{ $history->notes }}</p>
                                                    @endif
                                                </div>
                                                <div class="text-right text-sm whitespace-nowrap text-gray-500">
                                                    <time>{{ $history->created_at->format('M j, g:i A') }}</time>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            @endforeach
                        </ul>
                    </div>
                </div>

                <!-- Order Items Summary -->
                <div class="border-t pt-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Items in this order</h3>

                    <div class="space-y-4">
                        @foreach ($order->items as $item)
                            <div class="flex items-center space-x-4">
                                <div class="flex-shrink-0 w-12 h-12 bg-gray-200 rounded overflow-hidden">
                                    @if ($item->product_image)
                                        <img src="{{ Storage::url($item->product_image) }}"
                                            alt="{{ $item->getDisplayName() }}" class="w-full h-full object-cover">
                                    @else
                                        <div class="w-full h-full flex items-center justify-center">
                                            <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                                </path>
                                            </svg>
                                        </div>
                                    @endif
                                </div>

                                <div class="flex-1 min-w-0">
                                    <p class="text-sm font-medium text-gray-900">{{ $item->getDisplayName() }}</p>
                                    <p class="text-sm text-gray-500">Qty: {{ $item->quantity }}</p>
                                </div>

                                <div class="text-sm font-medium text-gray-900">
                                    {{ $item->getLineTotalMoney()->format() }}
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>

                <!-- Order Total -->
                <div class="border-t pt-4 mt-6">
                    <div class="flex justify-between text-lg font-medium">
                        <span>Total</span>
                        <span>{{ $order->getTotalMoney()->format() }}</span>
                    </div>
                </div>
            </div>

            <!-- Actions -->
            <div class="flex flex-col sm:flex-row gap-4">
                <a href="{{ route('orders.show', ['orderNumber' => $order->order_number, 'token' => $order->guest_token]) }}"
                    class="flex-1 bg-blue-600 text-white text-center py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors">
                    View Full Order Details
                </a>

                @if ($order->canBeCancelled())
                    <button onclick="confirmCancellation('{{ $order->order_number }}')"
                        class="flex-1 bg-red-600 text-white text-center py-3 rounded-lg font-medium hover:bg-red-700 transition-colors">
                        Cancel Order
                    </button>
                @endif

                <a href="{{ route('orders.track') }}"
                    class="flex-1 bg-gray-200 text-gray-800 text-center py-3 rounded-lg font-medium hover:bg-gray-300 transition-colors">
                    Track Another Order
                </a>
            </div>
        @endif
    </div>

    @if ($order && $order->canBeCancelled())
        <!-- Cancel Order Modal -->
        <div id="cancel-modal" class="fixed inset-0 z-50 overflow-y-auto hidden" x-data="{ open: false }" x-show="open"
            x-cloak>
            <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @click="open = false"></div>

                <div
                    class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                    <form method="POST" action="{{ route('orders.cancel', $order->order_number) }}">
                        @csrf
                        <input type="hidden" name="token" value="{{ $order->guest_token }}">

                        <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                            <div class="sm:flex sm:items-start">
                                <div
                                    class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                                    <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24"
                                        stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                                    </svg>
                                </div>
                                <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                                    <h3 class="text-lg leading-6 font-medium text-gray-900">Cancel Order</h3>
                                    <div class="mt-2">
                                        <p class="text-sm text-gray-500">
                                            Are you sure you want to cancel order {{ $order->order_number }}? This action
                                            cannot be undone.
                                        </p>
                                        <div class="mt-4">
                                            <label for="reason" class="block text-sm font-medium text-gray-700">Reason
                                                for cancellation (optional)</label>
                                            <textarea name="reason" id="reason" rows="3"
                                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                                                placeholder="Please let us know why you're cancelling..."></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                            <button type="submit"
                                class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm">
                                Cancel Order
                            </button>
                            <button type="button" @click="open = false"
                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                                Keep Order
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <script>
            function confirmCancellation(orderNumber) {
                Alpine.data('cancel-modal', () => ({
                    open: true
                }));
                document.getElementById('cancel-modal').style.display = 'block';
            }
        </script>
    @endif
@endsection
</file>

<file path="resources/views/frontend/products/card.blade.php">
{{-- resources/views/frontend/products/card.blade.php --}}
<div
    class="bg-white rounded-lg hover:scale-105 transition-transform border border-gray-300 overflow-hidden h-full flex flex-col">
    <a href="{{ route('products.show', $product->slug) }}">
        <div class="aspect-square bg-gray-200 relative overflow-hidden">
            @if ($product->getMainImage())
                <img src="{{ Storage::url($product->getMainImage()) }}" alt="{{ $product->name }}"
                    class="w-full h-full object-cover hover:scale-105 transition-transform duration-300">
            @else
                <div class="w-full h-full flex items-center justify-center bg-gray-100">
                    <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                        </path>
                    </svg>
                </div>
            @endif

            @if ($product->getDiscountPercentage())
                <div class="absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded">
                    -{{ $product->getDiscountPercentage() }}%
                </div>
            @endif

            @if ($product->is_featured)
                <div class="absolute top-2 right-2 bg-yellow-500 text-white text-xs px-2 py-1 rounded">
                    Featured
                </div>
            @endif
        </div>
    </a>

    <div class="p-4 flex flex-col flex-grow">
        <h3 class="font-semibold text-gray-900 mb-2 line-clamp-2">
            <a href="{{ route('products.show', $product->slug) }}" class="hover:text-blue-600">
                {{ $product->name }}
            </a>
        </h3>

        <p class="text-gray-600 text-sm mb-3 line-clamp-2 flex-grow">{{ $product->short_description }}</p>

        <!-- Stock indicator -->
        @if (
            $product->track_inventory &&
                $product->inventory_quantity <= $product->low_stock_threshold &&
                $product->inventory_quantity > 0)
            <p class="text-orange-600 text-xs mb-3">Only {{ $product->inventory_quantity }} left!</p>
        @endif

        <!-- Price and Button Section - Always at bottom -->
        <div class="mt-auto">
            <div class="flex justify-between items-end">
                <!-- Price Section - Always Stacked -->
                <div class="flex flex-col">
                    <span class="font-bold text-lg text-gray-900">${{ number_format($product->price, 2) }}</span>
                    @if ($product->compare_price && $product->compare_price > $product->price)
                        <span
                            class="text-sm text-gray-500 line-through">${{ number_format($product->compare_price, 2) }}</span>
                    @endif
                </div>

                <!-- Button Section - Always Bottom Right -->
                <div class="flex-shrink-0">
                    @if ($product->isInStock() && !$product->hasVariants())
                        <button onclick="addToCart({{ $product->id }})"
                            class="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 whitespace-nowrap">
                            Add to Cart
                        </button>
                    @else
                        <a href="{{ route('products.show', $product->slug) }}"
                            class="inline-block px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 whitespace-nowrap">
                            View Options
                        </a>
                    @endif
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function addToCart(productId, variantId = null) {
        fetch('{{ route('cart.add') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({
                    product_id: productId,
                    variant_id: variantId,
                    quantity: 1
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update cart count
                    const cartCount = document.getElementById('cart-count');
                    if (cartCount) {
                        cartCount.textContent = data.cart_count;
                    }

                    // Show success message (you can implement a toast notification here)
                    alert('Item added to cart!');
                } else {
                    alert(data.message || 'Error adding item to cart');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding item to cart');
            });
    }
</script>
</file>

<file path="resources/views/frontend/products/index.blade.php">
{{-- resources/views/frontend/products/index.blade.php --}}
@extends('layouts.frontend')

@section('title', 'Products - ' . config('app.name'))

@section('content')
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Page Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 mb-4">Products</h1>

            <!-- Filters -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-300 p-6 mb-6">
                <form method="GET" class="flex flex-wrap gap-4 items-end">
                    <!-- Search -->
                    <div class="flex-1 min-w-64">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Search</label>
                        <input type="text" name="search" value="{{ request('search') }}" placeholder="Search products..."
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                    </div>

                    <!-- Price Range -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Min Price</label>
                        <input type="number" name="min_price" value="{{ request('min_price') }}" placeholder="0"
                            class="w-24 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Max Price</label>
                        <input type="number" name="max_price" value="{{ request('max_price') }}" placeholder="1000"
                            class="w-24 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                    </div>

                    <!-- Sort -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Sort by</label>
                        <select name="sort"
                            class="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                            <option value="created_at" {{ request('sort') == 'created_at' ? 'selected' : '' }}>Newest
                            </option>
                            <option value="price_low" {{ request('sort') == 'price_low' ? 'selected' : '' }}>Price: Low to
                                High</option>
                            <option value="price_high" {{ request('sort') == 'price_high' ? 'selected' : '' }}>Price: High
                                to Low</option>
                            <option value="name" {{ request('sort') == 'name' ? 'selected' : '' }}>Name: A to Z</option>
                        </select>
                    </div>

                    <div>
                        <button type="submit"
                            class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500">
                            Filter
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Results Count -->
        <div class="mb-6">
            <p class="text-gray-600">Showing {{ $products->count() }} of {{ $products->total() }} products</p>
        </div>

        <!-- Products Grid -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8">
            @forelse($products as $product)
                @include('frontend.products.card', ['product' => $product])
            @empty
                <div class="col-span-full text-center py-12">
                    <p class="text-gray-500 text-lg">No products found.</p>
                    <a href="{{ route('products.index') }}" class="text-blue-600 hover:text-blue-700 mt-2 inline-block">View
                        all products</a>
                </div>
            @endforelse
        </div>

        <!-- Pagination -->
        <div class="flex justify-center">
            {{ $products->appends(request()->query())->links() }}
        </div>
    </div>
@endsection
</file>

<file path="resources/views/frontend/products/show.blade.php">
{{-- resources/views/frontend/products/show.blade.php --}}
@extends('layouts.frontend')

@section('title', $product->name . ' - ' . config('app.name'))

@section('content')
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="lg:grid lg:grid-cols-2 lg:gap-8">

            <!-- Product Images -->
            <div class="mb-8 lg:mb-0">
                <!-- Main Image -->
                <div class="aspect-square bg-gray-200 rounded-lg overflow-hidden mb-4">
                    @if ($product->getMainImage())
                        <img src="{{ Storage::url($product->getMainImage()) }}" alt="{{ $product->name }}"
                            class="w-full h-full object-cover" id="main-product-image">
                    @else
                        <div class="w-full h-full flex items-center justify-center bg-gray-100">
                            <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                </path>
                            </svg>
                        </div>
                    @endif
                </div>

                <!-- Thumbnail Gallery -->
                @if ($product->gallery && count($product->gallery) > 0)
                    <div class="grid grid-cols-4 gap-2">
                        @if ($product->image)
                            <button onclick="changeMainImage('{{ Storage::url($product->image) }}')"
                                class="aspect-square bg-gray-200 rounded overflow-hidden border-2 border-blue-500">
                                <img src="{{ Storage::url($product->image) }}" alt="{{ $product->name }}"
                                    class="w-full h-full object-cover">
                            </button>
                        @endif

                        @foreach ($product->gallery as $image)
                            <button onclick="changeMainImage('{{ Storage::url($image) }}')"
                                class="aspect-square bg-gray-200 rounded overflow-hidden border-2 border-transparent hover:border-blue-500">
                                <img src="{{ Storage::url($image) }}" alt="{{ $product->name }}"
                                    class="w-full h-full object-cover">
                            </button>
                        @endforeach
                    </div>
                @endif
            </div>

            <!-- Product Info -->
            <div class="lg:pl-8">
                <!-- Product Title -->
                <div class="mb-6">
                    <h1 class="text-3xl font-bold text-gray-900 mb-2">{{ $product->name }}</h1>
                </div>

                <!-- Product Variants - Flexible Attribute System -->
                <!-- Product Variants - Completely Dynamic -->
                @if ($product->hasVariants())
                    <div class="mb-6" x-data="{
                        selectedAttributes: {},
                        selectedVariant: null,
                        availableVariants: {{ $product->variants->load('attributeValues.attribute')->toJson() }},
                        attributes: {},
                        lowStockThreshold: {{ $product->low_stock_threshold ?? 5 }},
                    
                        init() {
                            // Group attributes dynamically with full metadata
                            this.availableVariants.forEach(variant => {
                                variant.attribute_values.forEach(av => {
                                    const attr = av.attribute;
                                    if (!this.attributes[attr.name]) {
                                        this.attributes[attr.name] = {
                                            name: attr.name,
                                            display_type: attr.display_type,
                                            sort_order: attr.sort_order,
                                            values: new Map()
                                        };
                                    }
                                    // Store both value and color_code
                                    this.attributes[attr.name].values.set(av.value, {
                                        value: av.value,
                                        color_code: av.color_code,
                                        label: av.label || av.value
                                    });
                                });
                            });
                    
                            // Convert Maps to Arrays and sort by attribute sort_order
                            const sortedAttributes = {};
                            Object.entries(this.attributes)
                                .sort(([, a], [, b]) => a.sort_order - b.sort_order)
                                .forEach(([name, data]) => {
                                    sortedAttributes[name] = {
                                        ...data,
                                        values: Array.from(data.values.values())
                                    };
                                });
                            this.attributes = sortedAttributes;
                        },
                    
                        selectAttribute(attributeName, value) {
                            this.selectedAttributes[attributeName] = value;
                            this.updateSelectedVariant();
                        },
                    
                        updateSelectedVariant() {
                            const requiredAttributes = Object.keys(this.attributes);
                            const selectedAttributeKeys = Object.keys(this.selectedAttributes);
                    
                            const allSelected = requiredAttributes.every(attr =>
                                selectedAttributeKeys.includes(attr) && this.selectedAttributes[attr]
                            );
                    
                            if (allSelected) {
                                this.selectedVariant = this.availableVariants.find(variant => {
                                    return requiredAttributes.every(attrName => {
                                        const variantValue = variant.attribute_values.find(av =>
                                            av.attribute.name === attrName
                                        )?.value;
                                        return variantValue === this.selectedAttributes[attrName];
                                    });
                                });
                            } else {
                                this.selectedVariant = null;
                            }
                        },
                    
                        isAttributeValueAvailable(attributeName, value) {
                            const otherSelectedAttrs = Object.keys(this.selectedAttributes)
                                .filter(key => key !== attributeName)
                                .reduce((obj, key) => {
                                    obj[key] = this.selectedAttributes[key];
                                    return obj;
                                }, {});
                    
                            return this.availableVariants.some(variant => {
                                const hasThisValue = variant.attribute_values.some(av =>
                                    av.attribute.name === attributeName && av.value === value
                                );
                    
                                if (!hasThisValue) return false;
                    
                                const matchesOthers = Object.keys(otherSelectedAttrs).every(otherAttr => {
                                    const variantValue = variant.attribute_values.find(av =>
                                        av.attribute.name === otherAttr
                                    )?.value;
                                    return variantValue === otherSelectedAttrs[otherAttr];
                                });
                    
                                return matchesOthers && variant.inventory_quantity > 0;
                            });
                        },
                    
                        getCurrentPrice() {
                            if (this.selectedVariant) {
                                return '$' + parseFloat(this.selectedVariant.price).toFixed(2);
                            }
                            return '${{ number_format($product->price, 2) }}';
                        },
                    
                        getComparePrice() {
                            if (this.selectedVariant && this.selectedVariant.compare_price) {
                                return '$' + parseFloat(this.selectedVariant.compare_price).toFixed(2);
                            }
                            @if($product->compare_price)
                            return '${{ number_format($product->compare_price, 2) }}';
                            @endif
                            return null;
                        },
                    
                        getDiscountPercentage() {
                            if (this.selectedVariant && this.selectedVariant.compare_price && this.selectedVariant.compare_price > this.selectedVariant.price) {
                                return Math.round(((this.selectedVariant.compare_price - this.selectedVariant.price) / this.selectedVariant.compare_price) * 100);
                            }
                            @if($product->getDiscountPercentage())
                            return {{ $product->getDiscountPercentage() }};
                            @endif
                            return null;
                        },
                    
                        getStockMessage() {
                            if (!this.selectedVariant) return '';
                            const stock = this.selectedVariant.inventory_quantity;
                            if (stock <= 0) return 'Out of Stock';
                            if (stock <= this.lowStockThreshold) return 'Only a few left!';
                            return 'In Stock';
                        },
                    
                        getStockColor() {
                            if (!this.selectedVariant) return 'text-gray-600';
                            const stock = this.selectedVariant.inventory_quantity;
                            if (stock <= 0) return 'text-red-600';
                            if (stock <= this.lowStockThreshold) return 'text-orange-600';
                            return 'text-green-600';
                        },
                    
                        allRequiredAttributesSelected() {
                            return Object.keys(this.attributes).every(attr =>
                                this.selectedAttributes[attr]
                            );
                        }
                    }">

                        <!-- Dynamic Pricing -->
                        <div class="mb-6">
                            <div class="flex items-center space-x-3 mb-2">
                                <span class="text-3xl font-bold text-gray-900" x-text="getCurrentPrice()"></span>
                                <span x-show="getComparePrice()" x-text="getComparePrice()"
                                    class="text-xl text-gray-500 line-through"></span>
                                <span x-show="getDiscountPercentage()" x-text="'Save ' + getDiscountPercentage() + '%'"
                                    class="text-sm bg-red-100 text-red-800 px-2 py-1 rounded font-medium"></span>
                            </div>

                            <!-- Stock Status - Only show when variant is selected -->
                            <div x-show="selectedVariant" class="flex items-center" :class="getStockColor()">
                                <svg x-show="selectedVariant && selectedVariant.inventory_quantity > 0" class="w-5 h-5 mr-2"
                                    fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd"
                                        d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                        clip-rule="evenodd"></path>
                                </svg>
                                <svg x-show="selectedVariant && selectedVariant.inventory_quantity <= 0"
                                    class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd"
                                        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                                        clip-rule="evenodd"></path>
                                </svg>
                                <span class="font-medium" x-text="getStockMessage()"></span>
                            </div>
                        </div>

                        <!-- Completely Dynamic Attribute Selection -->
                        <template x-for="(attributeData, attributeName) in attributes" :key="attributeName">
                            <div class="mb-6">
                                <h3 class="text-sm font-medium text-gray-900 mb-3">
                                    <span x-text="attributeName"></span>:
                                    <span
                                        x-text="selectedAttributes[attributeName] || 'Select ' + attributeName.toLowerCase()"
                                        class="font-normal"></span>
                                </h3>

                                <!-- Color Swatch Display (data-driven) -->
                                <div x-show="attributeData.display_type === 'color_swatch'" class="flex flex-wrap gap-3">
                                    <template x-for="valueData in attributeData.values" :key="valueData.value">
                                        <button @click="selectAttribute(attributeName, valueData.value)"
                                            :disabled="!isAttributeValueAvailable(attributeName, valueData.value)"
                                            :class="{
                                                'ring-2 ring-blue-500': selectedAttributes[attributeName] === valueData
                                                    .value,
                                                'opacity-25 cursor-not-allowed': !isAttributeValueAvailable(
                                                    attributeName, valueData.value),
                                                'hover:ring-1 hover:ring-gray-400': isAttributeValueAvailable(
                                                    attributeName, valueData.value) && selectedAttributes[
                                                    attributeName] !== valueData.value
                                            }"
                                            class="relative w-8 h-8 rounded-full border border-gray-300 focus:outline-none transition-all"
                                            :style="'background-color: ' + (valueData.color_code || '#CCCCCC')"
                                            :title="valueData.label">
                                            <!-- Not available overlay -->
                                            <div x-show="!isAttributeValueAvailable(attributeName, valueData.value)"
                                                class="absolute inset-0 flex items-center justify-center">
                                                <svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor"
                                                    viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                        d="M6 18L18 6M6 6l12 12"></path>
                                                </svg>
                                            </div>

                                            <!-- Selected indicator -->
                                            <div x-show="selectedAttributes[attributeName] === valueData.value && isAttributeValueAvailable(attributeName, valueData.value)"
                                                class="absolute inset-0 flex items-center justify-center">
                                                <svg class="w-4 h-4"
                                                    :class="['White', 'Silver', 'Starlight', 'White Titanium'].includes(
                                                        valueData.value) ? 'text-gray-800' : 'text-white'"
                                                    fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd"
                                                        d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                                        clip-rule="evenodd"></path>
                                                </svg>
                                            </div>
                                        </button>
                                    </template>
                                </div>

                                <!-- Button Display (data-driven) -->
                                <div x-show="attributeData.display_type === 'button'"
                                    :class="attributeData.values.length <= 4 ? 'grid grid-cols-2 sm:grid-cols-4 gap-3' :
                                        'grid grid-cols-3 sm:grid-cols-5 gap-2'">
                                    <template x-for="valueData in attributeData.values" :key="valueData.value">
                                        <button @click="selectAttribute(attributeName, valueData.value)"
                                            :disabled="!isAttributeValueAvailable(attributeName, valueData.value)"
                                            :class="{
                                                'border-blue-500 bg-blue-50 text-blue-600': selectedAttributes[
                                                    attributeName] === valueData.value,
                                                'border-gray-300 text-gray-900 hover:border-gray-400': selectedAttributes[
                                                    attributeName] !== valueData.value && isAttributeValueAvailable(
                                                    attributeName, valueData.value),
                                                'border-gray-200 text-gray-400 cursor-not-allowed bg-gray-50': !
                                                    isAttributeValueAvailable(attributeName, valueData.value)
                                            }"
                                            class="relative py-3 px-4 border rounded-lg text-sm font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all"
                                            x-text="valueData.label">
                                            <!-- Not available overlay -->
                                            <div x-show="!isAttributeValueAvailable(attributeName, valueData.value)"
                                                class="absolute inset-0 flex items-center justify-center">
                                                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor"
                                                    viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1"
                                                        d="M6 18L18 6M6 6l12 12"></path>
                                                </svg>
                                            </div>
                                        </button>
                                    </template>
                                </div>
                            </div>
                        </template>

                        <!-- Add to Cart Button -->
                        <div class="mb-6">
                            <button
                                @click="if(selectedVariant && selectedVariant.inventory_quantity > 0) {
                addToCart({{ $product->id }}, selectedVariant.id);
            } else if(!allRequiredAttributesSelected()) {
                alert('Please select all options first');
            } else {
                alert('This variant is out of stock');
            }"
                                :disabled="!selectedVariant || selectedVariant.inventory_quantity <= 0"
                                :class="{
                                    'bg-blue-600 hover:bg-blue-700 text-white': selectedVariant && selectedVariant
                                        .inventory_quantity > 0,
                                    'bg-gray-400 text-white cursor-not-allowed': !selectedVariant || selectedVariant
                                        .inventory_quantity <= 0
                                }"
                                class="w-full py-3 px-6 rounded-lg font-medium focus:ring-2 focus:ring-blue-500 transition-colors">
                                <span x-show="!allRequiredAttributesSelected()">Select Options</span>
                                <span
                                    x-show="allRequiredAttributesSelected() && (!selectedVariant || selectedVariant.inventory_quantity <= 0)">Out
                                    of Stock</span>
                                <span x-show="selectedVariant && selectedVariant.inventory_quantity > 0">Add to Cart</span>
                            </button>
                        </div>
                    </div>
                @else
                    <!-- Simple Product -->
                    <div class="mb-6">
                        <!-- Price -->
                        <div class="flex items-center space-x-3 mb-4">
                            <span class="text-3xl font-bold text-gray-900">${{ number_format($product->price, 2) }}</span>

                            @if ($product->compare_price && $product->compare_price > $product->price)
                                <span
                                    class="text-xl text-gray-500 line-through">${{ number_format($product->compare_price, 2) }}</span>
                                <span class="text-sm bg-red-100 text-red-800 px-2 py-1 rounded font-medium">
                                    Save {{ $product->getDiscountPercentage() }}%
                                </span>
                            @endif
                        </div>

                        <!-- Stock Status -->
                        @if ($product->isInStock())
                            <div class="flex items-center text-green-600 mb-6">
                                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd"
                                        d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                        clip-rule="evenodd"></path>
                                </svg>
                                <span class="font-medium">
                                    @if ($product->track_inventory && $product->inventory_quantity <= $product->low_stock_threshold)
                                        Only a few left!
                                    @else
                                        In Stock
                                    @endif
                                </span>
                            </div>
                        @else
                            <div class="flex items-center text-red-600 mb-6">
                                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd"
                                        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                                        clip-rule="evenodd"></path>
                                </svg>
                                <span class="font-medium">Out of Stock</span>
                            </div>
                        @endif

                        <!-- Quantity & Add to Cart -->
                        <div class="flex items-center space-x-4">
                            <!-- Quantity Selector -->
                            <div class="flex items-center border border-gray-300 rounded">
                                <button onclick="decreaseQuantity()" class="px-3 py-2 hover:bg-gray-100">-</button>
                                <input type="number" id="quantity" value="1" min="1"
                                    class="w-16 px-3 py-2 text-center border-0 focus:ring-0">
                                <button onclick="increaseQuantity()" class="px-3 py-2 hover:bg-gray-100">+</button>
                            </div>

                            <!-- Add to Cart -->
                            @if ($product->isInStock())
                                <button onclick="addToCartWithQuantity({{ $product->id }})"
                                    class="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 focus:ring-2 focus:ring-blue-500">
                                    Add to Cart
                                </button>
                            @else
                                <button disabled
                                    class="flex-1 bg-gray-400 text-white py-3 px-6 rounded-lg font-medium cursor-not-allowed">
                                    Out of Stock
                                </button>
                            @endif
                        </div>
                    </div>
                @endif

                <!-- Product Details -->
                <div class="space-y-6">
                    <!-- Description -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">Description</h3>
                        <div class="prose prose-sm text-gray-600">
                            {!! nl2br(e($product->description)) !!}
                        </div>
                    </div>

                    <!-- Product Info -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">Product Information</h3>
                        <dl class="grid grid-cols-1 gap-3 sm:grid-cols-2">
                            <div>
                                <dt class="text-sm font-medium text-gray-500">SKU</dt>
                                <dd class="text-sm text-gray-900">{{ $product->sku }}</dd>
                            </div>

                            @if ($product->weight)
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Weight</dt>
                                    <dd class="text-sm text-gray-900">{{ $product->weight }} lbs</dd>
                                </div>
                            @endif

                            @if ($product->categories->count() > 0)
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Categories</dt>
                                    <dd class="text-sm text-gray-900">
                                        @foreach ($product->categories as $category)
                                            <a href="{{ route('categories.show', $category->slug) }}"
                                                class="text-blue-600 hover:text-blue-700">
                                                {{ $category->name }}
                                            </a>{{ !$loop->last ? ', ' : '' }}
                                        @endforeach
                                    </dd>
                                </div>
                            @endif

                            @if ($product->tags && count($product->tags) > 0)
                                <div class="sm:col-span-2">
                                    <dt class="text-sm font-medium text-gray-500">Tags</dt>
                                    <dd class="text-sm text-gray-900">
                                        <div class="flex flex-wrap gap-2 mt-1">
                                            @foreach ($product->tags as $tag)
                                                <span
                                                    class="inline-block bg-gray-100 text-gray-800 px-2 py-1 rounded text-xs">
                                                    {{ $tag }}
                                                </span>
                                            @endforeach
                                        </div>
                                    </dd>
                                </div>
                            @endif
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <!-- Related Products -->
        @if ($relatedProducts->count() > 0)
            <div class="mt-16">
                <h2 class="text-2xl font-bold text-gray-900 mb-8">Related Products</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    @foreach ($relatedProducts as $relatedProduct)
                        @include('frontend.products.card', ['product' => $relatedProduct])
                    @endforeach
                </div>
            </div>
        @endif
    </div>

    <script>
        // Image gallery functionality
        function changeMainImage(imageSrc) {
            document.getElementById('main-product-image').src = imageSrc;
        }

        // Quantity controls for simple products
        function increaseQuantity() {
            const qty = document.getElementById('quantity');
            qty.value = parseInt(qty.value) + 1;
        }

        function decreaseQuantity() {
            const qty = document.getElementById('quantity');
            if (parseInt(qty.value) > 1) {
                qty.value = parseInt(qty.value) - 1;
            }
        }

        // Add to cart with quantity
        function addToCartWithQuantity(productId) {
            const quantity = parseInt(document.getElementById('quantity').value);

            fetch('{{ route('cart.add') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        product_id: productId,
                        variant_id: null,
                        quantity: quantity
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('cart-count').textContent = data.cart_count;
                        showToast(`Added ${quantity} item(s) to cart!`, 'success');
                    } else {
                        showToast('Error adding item to cart', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error adding item to cart', 'error');
                });
        }
    </script>
@endsection
</file>

<file path="resources/views/frontend/home.blade.php">
{{-- resources/views/frontend/home.blade.php --}}
@extends('layouts.frontend')

@section('title', 'Home - ' . config('app.name'))

@section('content')
    <!-- Hero Section -->
    <section class="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24">
            <div class="text-center">
                <h1 class="text-4xl md:text-6xl font-bold mb-6">
                    Welcome to {{ config('app.name') }}
                </h1>
                <p class="text-xl md:text-2xl mb-8 text-blue-100">
                    Discover amazing products at unbeatable prices
                </p>
                <a href="{{ route('products.index') }}"
                    class="inline-block bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors">
                    Shop Now
                </a>
            </div>
        </div>
    </section>

    <!-- Featured Categories -->
    @if ($categories->count() > 0)
        <section class="py-16 bg-white">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <h2 class="text-3xl font-bold text-gray-900 text-center mb-12">Shop by Category</h2>
                <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-6">
                    @foreach ($categories as $category)
                        <a href="{{ route('categories.show', $category->slug) }}" class="group text-center">
                            <div
                                class="w-20 h-20 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center group-hover:bg-blue-100 transition-colors">
                                @if ($category->image)
                                    <img src="{{ Storage::url($category->image) }}" alt="{{ $category->name }}"
                                        class="w-12 h-12 object-cover rounded-full">
                                @else
                                    <svg class="w-8 h-8 text-gray-600 group-hover:text-blue-600" fill="none"
                                        stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10">
                                        </path>
                                    </svg>
                                @endif
                            </div>
                            <h3 class="font-medium text-gray-900 group-hover:text-blue-600">{{ $category->name }}</h3>
                        </a>
                    @endforeach
                </div>
            </div>
        </section>
    @endif

    <!-- Featured Products -->
    @if ($featuredProducts->count() > 0)
        <section class="py-16 bg-gray-50">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center mb-12">
                    <h2 class="text-3xl font-bold text-gray-900">Featured Products</h2>
                    <a href="{{ route('products.index') }}" class="text-blue-600 hover:text-blue-700 font-medium">View All
                        →</a>
                </div>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    @foreach ($featuredProducts as $product)
                        @include('frontend.products.card', ['product' => $product])
                    @endforeach
                </div>
            </div>
        </section>
    @endif

    <!-- New Products -->
    @if ($newProducts->count() > 0)
        <section class="py-16 bg-white">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center mb-12">
                    <h2 class="text-3xl font-bold text-gray-900">New Arrivals</h2>
                    <a href="{{ route('products.index', ['sort' => 'created_at']) }}"
                        class="text-blue-600 hover:text-blue-700 font-medium">View All →</a>
                </div>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    @foreach ($newProducts as $product)
                        @include('frontend.products.card', ['product' => $product])
                    @endforeach
                </div>
            </div>
        </section>
    @endif

    <!-- Call to Action -->
    <section class="py-16 bg-blue-600 text-white">
        <div class="max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8">
            <h2 class="text-3xl font-bold mb-4">Ready to Start Shopping?</h2>
            <p class="text-xl mb-8 text-blue-100">Browse our collection of quality products</p>
            <a href="{{ route('products.index') }}"
                class="inline-block bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors">
                Explore Products
            </a>
        </div>
    </section>
@endsection
</file>

</files>
